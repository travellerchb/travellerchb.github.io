<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数学建模笔记</title>
      <link href="/2024/08/06/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/08/06/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数学建模的六个步骤"><a href="#数学建模的六个步骤" class="headerlink" title="数学建模的六个步骤"></a>数学建模的六个步骤</h1><blockquote><p>一、模型准备  了解问题、收集信息</p><p>二、模型假设  简化问题、定义变量和假设</p><p>三、模型建立  在假设的基础上，建立变量之间的数学结构</p></blockquote><span id="more"></span><blockquote><p>四、模型求解  利用数据对模型求解结果</p><p>五、模型分析  阐述思路、反思、进行数学上的分析</p><p>六、模型检验  与实际结果进行比较，吻合做结论，否则重新建模</p></blockquote><h1 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h1><blockquote><p>建模员：系统掌握各类模型（基础知识、算法知识、优秀论文）</p><p>程序员：掌握Matlab&#x2F;python（编程、常用模型、优秀论文）</p><p>写作员；熟练撰写论文各类模块内容（写作要求、学术语言、排版技巧）</p></blockquote><h1 id="赛题类型"><a href="#赛题类型" class="headerlink" title="赛题类型"></a>赛题类型</h1><blockquote><p>预测类：</p><p>​1、目标</p><p>​2、收集分析资料</p><p>​3、方法</p><p>​4、分析结果</p><p>​5、修正结果</p><p>​6、给出结果</p><p>插值与拟合：小样本内部预测</p><p>回归分析：中、大样本内部预测</p><p>灰色预测：小样本未来预测（有固定趋势）</p><p>时序序列：中、大样本的随机因素或周期特征的未来趋势未来预测</p><p>神经网络：大（特大）样本未来预测</p></blockquote><blockquote><p>评价类：</p><p>​1、目标</p><p>​2、确立对象</p><p>​3、建立体系</p><p>​4、各指标权重</p><p>​5、模型</p><p>​6、计算评价值</p><p>​7、给出评价结果</p></blockquote><blockquote><p>机理分析类：</p></blockquote><blockquote><p>优化类：</p><p>​1、优化目标</p><p>​2、决策变量</p><p>​3、目标函数</p><p>​4、约束条件</p><p>​5、合适方法求解目标函数</p><p>​6、给出优化结果</p></blockquote><h1 id="文献"><a href="#文献" class="headerlink" title="文献"></a>文献</h1><ul><li>文献查找<ul><li>查找途径<ul><li>知网、百度学术、谷歌学术</li></ul></li><li>按关键词搜索</li><li>筛选<ul><li>相关度、被引次数、发表日期</li><li>期刊论文、硕博论文</li></ul></li><li>看完摘要再下载</li></ul></li><li>文献阅读与整理<ul><li>文献阅读目的<ul><li>深入认识问题，适当借鉴思路</li></ul></li><li>带着目的看文献<ul><li>思路（模型）</li><li>数据（表格）</li><li>论文背景分析（引用、评价、展望）</li></ul></li><li>快速阅读文献<ul><li>摘要</li><li>目录</li><li>解决什么问题、用了什么方法、得到什么结果</li></ul></li><li>整理、总结文献<ul><li>文献管理软件<ul><li>Mendeley、EndNote、NoteExpress</li></ul></li></ul></li></ul></li></ul><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><ul><li>数据查找<ul><li>数据质量决定了模型的表现性</li><li>相关网站推荐<ul><li>官方网站</li><li>大数据导航</li></ul></li><li>常见方式<ul><li>免费、付费下载</li><li>爬虫</li></ul></li><li>查找技巧<ul><li>多换关键词，由小变大</li><li>间接数据，由果及因</li><li>由数据入手建模</li></ul></li><li>重在数据的使用（对模型的正确认识）</li></ul></li></ul><h1 id="线性规划-LP"><a href="#线性规划-LP" class="headerlink" title="线性规划 LP"></a>线性规划 LP</h1><blockquote><p>在一组线性约束条件下，求一线性目标函数最大或最小的问题</p><p>将问题转化为线性问题</p><p>matlab一般求最小，要求最大加个负号</p><p>可行解、最优解、可行域R</p><p>min  c^T^x</p><p>A x &lt;&#x3D; b</p><p>Aeq x &#x3D; beq</p><p>lb &lt;&#x3D; x&lt;&#x3D; ub</p><p>c, x, b, beq, lb, ub为<strong>列向量</strong>，c为价值向量，b为资源向量，A、Aeq为矩阵 </p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x,fval] = linprog(c,A,b,Aeq,beq,lb,ub,x0,OPTIONS)</span><br></pre></td></tr></table></figure><blockquote><p><strong>x</strong>为返回决策向量的取值，<strong>fval</strong>为返回目标函数的最优解</p><p><strong>x0</strong>为x初值，<strong>OPTIONS</strong>为控制参数</p></blockquote><blockquote><p><strong>灵敏度分析</strong>：</p><p>系统因周围条件变化显示出来的敏感程度的分析</p><p>某些参数为估计或预测值，自身带有少许变动，一但改变原最优解是否符合，方案是否变动</p><p>对于数学规划问题（线性规划、整数规划、非线性规划）一定要做灵敏度分析</p></blockquote><blockquote><p>数学规划问题两种解决方法：基于求解器（较为简单）或基于问题的求解方法</p></blockquote><h1 id="整数规划-IP"><a href="#整数规划-IP" class="headerlink" title="整数规划 IP"></a>整数规划 IP</h1><p>数学规划中的变量（部分或全部）限制为整数时，称为（混合或完全）整数规划</p><p>若正在线性规划中，变量限制为整数时，则称为整数线性规划</p><p>目前所流行的求解方法往往只适用于整数线性规划</p><p>可能情况：</p><p>1、原线性规划与整数规划最优解一致</p><p>2、整数规划无可行解</p><p>3、有可行解，但最优解不如原线性规划</p><p>整数规划最优解不能按照实数最优解简单取整而获得</p><p><strong>纯整数规划</strong>：所有变量要求去非负整数（这时引进的<strong>松弛变量和剩余变量</strong>（将不等式转化为等式）可以不要求取整数）</p><p><strong>全整数规划</strong>：除了所有决策变量要求取非负整数外，系数A和常数b也要求取整数（这时引进的松弛变量和剩余变量也必须是整数）</p><p><strong>混合整数规划</strong>：只有一部分的决策变量要求取非负整数，另一部分可以取非负实数</p><p><strong>0—1整数规划</strong>：所有决策变量只能取0或1两个整数</p><p>一般来说，混合整数线性规划用</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x,fval] = intlinprog(f,intcon,A,b,Aeq,beq,lb,ub)</span><br></pre></td></tr></table></figure><p>intcon &#x3D; 1  第一个决策变量取整数</p><p>intcon &#x3D; [1,2]  第一、二个决策变量取整数</p><p>intcon &#x3D; 1:3  第一到三个决策变量取整数</p><p>inf为无穷</p><p>分枝定界法、割平面法</p><p>分枝定界法：</p><p>一、求解线性规划最优解（整数则为答案）</p><p>二、选取其中一个决策变量取下界（新约束条件），带入方程</p><p>三、若解为整数，则为答案</p><p>​若不为整数，则回到第二步取上界</p><p>割平面法：</p><p>一、求解线性规划最优解（整数则为答案）</p><p>二、引入松弛变量</p><p>​将c中松弛变量的系数按整数加小数划分，将b也按整数加小数划分</p><p>三、整数部分汇合，小数部分汇合，整数在等式左侧，小数在等式右侧</p><p>​等式右侧小数部分最终和只可能为整数，得到新的约束条件，带入方程</p><p>​</p><p>对于特别的0—1规划问题采用隐枚举法和匈牙利法</p><p>y &#x3D; 0&#x2F;1</p><p>可能需要在部分约束条件中添加y*M（M为一个极大的数）</p><p>非标准的指派问题：</p><p>1、最大化指派问题</p><p>​取c中最大元素m，令B &#x3D; b<del>ij</del>  &#x3D; m - c<del>ij</del> </p><p>2、人数和工作数不等</p><p>​人少工作多：添加虚拟的“人”，代价都为0</p><p>​人多工作少：添加虚拟的“工作”，代价都为0</p><p>3、一个人可做多件工作</p><p>​该人可化为几个相同的“人”</p><p>4、某工作一定不能由某人做</p><p>​该人做工作的相应代价取足够大M</p><p>匈牙利解法：</p><p>一、从c的每行元素都减去该行的最小元素</p><p>​再从新的c的每列元素都减去该列的最小元素，即为b</p><p>​b的各行各列中都出现0元素</p><p>二、</p><ul><li><p>从只有一个（或最少）0元素的行（列）开始，给这个0元素加圈，然后划去圈所在列（行）的其他0元素（因为一个任务只能指派一个人）</p></li><li><p>给只有一个（或最少）0元素的列（行）加圈，然后划去圈所在行的0元素</p></li><li><p>重复以上步骤，直到0元素都被圈或划掉</p></li><li><p>若圈的数目等于矩阵的阶数，则得到最优解</p></li></ul><p>​否则进行下一步</p><p>三、做最少的直线覆盖所有的0元素</p><ul><li>对没有圈的行打 √</li><li>对已打 √ 的行所有含划去0的列打 √</li><li>再对有打 √ 的列中含圈的行打 √</li><li>重复2、3直到不再打 √</li><li>对有 √ 的行、列画线，直线数 l 应等于 m</li><li>若 l !&#x3D; m，则指派错误，返回第二步</li><li>若l &#x3D; m &lt; n，则进行第四步</li></ul><p>四、变换矩阵以增加0元素</p><ul><li>找到没有被直线覆盖的所有元素的最小元素 i</li><li>打 √ 的各行都减 i</li><li>打 √ 的各列都加 i</li><li>再回到第二步重新指派</li></ul><p>匈牙利算法</p><p>例题：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c=[<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">3</span>;<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">7</span>;<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>;<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>;<span class="number">9</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line">c=c(:); <span class="comment">%将矩阵转化为列向量，c.shape = （25,1）</span></span><br><span class="line">a=<span class="built_in">zeros</span>(<span class="number">10</span>,<span class="number">25</span>); <span class="comment">%决策变量x的各行相加为1，各列相加为1，一共10条</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">5</span> <span class="comment">%一共5行5列</span></span><br><span class="line">a(<span class="built_in">i</span>,(<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">5</span>+<span class="number">1</span>:<span class="number">5</span>*<span class="built_in">i</span>)=<span class="number">1</span>;</span><br><span class="line">a(<span class="number">5</span>+<span class="built_in">i</span>,<span class="built_in">i</span>:<span class="number">5</span>:<span class="number">25</span>)=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">b=<span class="built_in">ones</span>(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">[x,y]=linprog(c,[],[],a,b,<span class="built_in">zeros</span>(<span class="number">25</span>,<span class="number">1</span>),<span class="built_in">ones</span>(<span class="number">25</span>,<span class="number">1</span>));</span><br><span class="line">X=<span class="built_in">reshape</span>(x,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">opt=y</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">c=[<span class="number">4</span> <span class="number">8</span> <span class="number">7</span> <span class="number">15</span> <span class="number">12</span>;<span class="number">7</span> <span class="number">9</span> <span class="number">17</span> <span class="number">14</span> <span class="number">10</span>;<span class="number">6</span> <span class="number">9</span> <span class="number">12</span> <span class="number">8</span> <span class="number">7</span>;<span class="number">6</span> <span class="number">7</span> <span class="number">14</span> <span class="number">6</span> <span class="number">10</span>;<span class="number">6</span> <span class="number">9</span> <span class="number">12</span> <span class="number">10</span> <span class="number">6</span>];</span><br><span class="line">n=<span class="built_in">size</span>(c,<span class="number">1</span>);</span><br><span class="line">c=c(:);</span><br><span class="line">A=[];</span><br><span class="line">B=[]; <span class="comment">%没有不等式关系</span></span><br><span class="line">Ae=<span class="built_in">zeros</span>(<span class="number">2</span>*n,n^<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=(<span class="built_in">i</span><span class="number">-1</span>)*n+<span class="number">1</span>:n*<span class="built_in">i</span></span><br><span class="line">           Ae(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> k=<span class="built_in">i</span>:n:n^<span class="number">2</span></span><br><span class="line">           Ae(n+<span class="built_in">i</span>,k)=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Be=<span class="built_in">ones</span>(<span class="number">2</span>*n,<span class="number">1</span>);</span><br><span class="line">Xm=<span class="built_in">zeros</span>(n^<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">XM=<span class="built_in">ones</span>(n^<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">[x,z]=linprog(c,A,B,Ae,Be,Xm,XM);</span><br><span class="line">x=<span class="built_in">reshape</span>(x,n,n);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最优解矩阵为&#x27;</span>);</span><br><span class="line">Assignment=<span class="built_in">round</span>(x) <span class="comment">%四舍五入</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最优解为&#x27;</span>);</span><br><span class="line">z</span><br></pre></td></tr></table></figure><h1 id="非线性规划-NP"><a href="#非线性规划-NP" class="headerlink" title="非线性规划 NP"></a>非线性规划 NP</h1><p>x(1-x) &#x3D; 0 限制0 1</p><p>s.t.   min f(x)</p><p>​A*x &lt;&#x3D; b</p><p>​Aeq*x &#x3D; beq</p><p>​c(x) &lt;&#x3D; 0</p><p>​ceq(x) &#x3D; 0</p><p>​lb &lt;&#x3D; x&lt;&#x3D; ub</p><p>[x,fval] &#x3D; fmincon(fun, x0, A, b, Aeq, beq, lb, ub, nonlcon, options)</p><p>fun为目标函数，x0为初值，nonlcon为c(x)、ceq(x)，options为优化参数</p><p>fun、nonlcon要用M文件定义</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> = <span class="title">fun1</span><span class="params">(x)</span>;</span></span><br><span class="line">f = sum(x.^<span class="number">2</span>)+<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[g,h]</span> = <span class="title">fun2</span><span class="params">(x)</span>;</span></span><br><span class="line">g = [-x(<span class="number">1</span>)^<span class="number">2</span>+x(<span class="number">2</span>)<span class="number">-3</span>x(<span class="number">3</span>)^<span class="number">2</span></span><br><span class="line">x(<span class="number">1</span>)+x(<span class="number">2</span>)^<span class="number">2</span>+x(<span class="number">3</span>)^<span class="number">3</span><span class="number">-20</span>];</span><br><span class="line">h = [-x(<span class="number">1</span>)-x(<span class="number">2</span>)^<span class="number">2</span>+<span class="number">2</span></span><br><span class="line">x(<span class="number">2</span>)+<span class="number">2</span>*x(<span class="number">3</span>)^<span class="number">2</span><span class="number">-3</span>];</span><br><span class="line"></span><br><span class="line">[x,y] = fmincon(<span class="string">&#x27;fun&#x27;</span>,<span class="built_in">rand</span>(<span class="number">3</span>,<span class="number">1</span>),[],[],[],[],<span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">1</span>),[],<span class="string">&#x27;fun2&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="二次规划"><a href="#二次规划" class="headerlink" title="二次规划"></a>二次规划</h1><p>目标函数自变量有二次，不一定全为二次</p><p>约束条件全为线性的</p><p>min 1&#x2F;2 x^T^ H X + f^T^  x            注意：因为前头有1&#x2F;2，所以H要乘上2倍，但f不变</p><p>s.t.  Ax &lt;&#x3D;b</p><p>​Aeq*x &#x3D; beq</p><p>​lb &lt;&#x3D; x&lt;&#x3D; ub</p><p>H为实矩阵，把含有平方的系数写在对角线上，x1x2的系数除以2后写在对角线两侧</p><p>[x,fval] &#x3D; quadprog(H, f, A, b, Aeq, beq, lb, ub, x0, options)</p><p>例：</p><p>​       min f(x) &#x3D; 2x<del>1</del> ^2^ -4x1x2 + 4x2^2^ - 6x1 - 3x2</p><p>s.t.  x1 + x2 &lt;&#x3D; 3</p><p>​4x1 + x2 &lt;&#x3D; 9</p><p>​x1, x2 &gt;&#x3D; 0</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h = [<span class="number">4</span>,<span class="number">-4</span>;<span class="number">-4</span>,<span class="number">8</span>];</span><br><span class="line">f = [<span class="number">-6</span>;<span class="number">-3</span>];</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">1</span>;<span class="number">4</span>,<span class="number">1</span>];</span><br><span class="line">b = [<span class="number">3</span>;<span class="number">9</span>];</span><br><span class="line">[x,value] = quadprog(h,f,a,b,[],[],<span class="built_in">zeros</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>exitflag表示优化过程的收敛情况</p><ul><li>退出标志为正数表示结果成功。</li><li>退出标志为负数表示结果不成功。</li><li>退出标志为零表示求解器因超过迭代限制或函数计算次数达到限制而停止</li></ul><p>x0初值不同影响结果；</p><p>先随机生成初值，代入计算出最优值</p><p>再将最优值作为初值输入，不停迭代，直到最优</p><p>多目标规划转为单目标规划：</p><p>一、把其他目标加入到约束条件中，设定范围</p><p>二、加入权重，目标函数由带有不同权重的多种目标组成</p><p>优化工具的主要命令</p><p>fgoalattain  多目标规划</p><p>fminbnd  有界标量非线性优化问题</p><p>fmincon  约束非线性极小化</p><p>fminimax  极小极大最优化</p><p>fminsearch 和 fminunc  无约束非线性最优化</p><p>​   min f(x)</p><p>​   [~,~] &#x3D; ~(‘fun’, x0, options);</p><p>fseminf  半无限极小化</p><p>linprog</p><p>quadprog</p><h1 id="层次分析法-AHP"><a href="#层次分析法-AHP" class="headerlink" title="层次分析法 AHP"></a>层次分析法 AHP</h1><p>为多目标、多准则或无结构特性的复杂决策问题提供简便的决策方法</p><p>定量与定性分析相结合，用决策者的经验判断衡量目标能否实现的标准之间的相对重要程度，并合理地给吃每个决策方案的每个标准的权数，利用权数求出各方案的优劣次序，比较有效地用于那些难以用定量方法解决的课题</p><p>三大典型应用：</p><ul><li>用于最佳方案的选取（选择运动员、选择地址）</li><li>用于评价类问题（评价水质状况、评价环境）</li><li>用于指标体系的优选（兼顾科学和效率）</li></ul><h2 id="建立层次结构模型"><a href="#建立层次结构模型" class="headerlink" title="建立层次结构模型"></a>建立层次结构模型</h2><ul><li>最高层：决策的目的、要解决的问题</li><li>中间层：考虑的因素、决策的准则</li><li>最低层：决策是的备选方案</li><li>对于相邻的两层，称最高层为目标层，低层为因素层</li></ul><h2 id="构造判断（成对比较）矩阵"><a href="#构造判断（成对比较）矩阵" class="headerlink" title="构造判断（成对比较）矩阵"></a>构造判断（成对比较）矩阵</h2><ol><li>不把所有因素放在一起比较，而是两两相互比较</li><li>采用相对尺度，减少性质不同的诸因素比较困难的问题，提高准确度</li><li>1—9标度方法，心理学家认为成对比较的因素不宜超过9个，即每层不要超过9个因素</li></ol><ul><li>1   同样重要</li><li>3   稍微重要</li><li>5   明显重要</li><li>7   强烈重要</li><li>9   极端重要</li><li>2、4、6、8   上述两相邻的中值</li><li>倒数   i : j &#x3D; a，则 j : i &#x3D; 1&#x2F;a</li></ul><p>一致阵：</p><ul><li>A 的秩为1，A 的唯一非零特征根为n</li><li>非零特征根n所对应的特征向量归一化后可作为权向量</li><li>Aw &#x3D; nw</li></ul><p>不一致阵：</p><ul><li>用对应于最大特征根⋋的特征向量作为权向量w</li><li>Aw &#x3D; ⋋w</li></ul><h2 id="层次单排序及其一致性检验"><a href="#层次单排序及其一致性检验" class="headerlink" title="层次单排序及其一致性检验"></a>层次单排序及其一致性检验</h2><p>判断矩阵最大特征根⋋<del>max</del> 的特征向量，经归一化后（使向量中各元素之和为1）后记为w</p><p>w的元素为同一层因素对于上一层因素某因素相对重要性的排序权值，这一过程称为层次单排序</p><p>一致性检验：对A确定不一致的允许范围</p><p>定理：</p><ul><li>n阶一致阵的唯一非零特征根为n</li><li>n阶正互反阵A的最大特征根⋋ &gt;&#x3D; n，当且仅当⋋ &#x3D; n时，A为一致阵</li></ul><p>定义一致性指标：CI &#x3D; (⋋ - n) &#x2F; (n - 1)</p><p>CI&#x3D;0，有完全的一致性</p><p>CI接近于0，有满意的一致性</p><p>CI越大，不一致越严重</p><p>随机一致性指标 RI （查表）</p><p>定义一致性比率：CR &#x3D; CI &#x2F; Ri</p><p>当CR &lt; 0.1时，认为不一致程度在允许范围内，否则要重新构建成对比较矩阵A</p><h2 id="层次总排序及其一致性检验"><a href="#层次总排序及其一致性检验" class="headerlink" title="层次总排序及其一致性检验"></a>层次总排序及其一致性检验</h2><p>计算某一层次所有因素对于最高层（总目标）相对重要性的权值，称为层次总排序</p><p>CR &#x3D;  (a<del>1</del> CI<del>1</del>  + … + a<del>m</del> CI<del>m</del>) &#x2F; ( a<del>1</del> RI<del>1</del>  + … + a<del>m</del> RI<del>m</del>)</p><p>当CR &lt; 0.1时，认为层次总排序通过一致性检验</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;请输入准则层判断矩阵A（n阶）&#x27;</span>);</span><br><span class="line">A=input(<span class="string">&#x27;A=&#x27;</span>);</span><br><span class="line">[n,n]=<span class="built_in">size</span>(A); <span class="comment">%得到矩阵的阶数</span></span><br><span class="line">[V,D]=eig(A); <span class="comment">%求得特征向量和特征值</span></span><br><span class="line"><span class="comment">%V为整个矩阵的特征向量</span></span><br><span class="line"><span class="comment">%D为矩阵的特征值，按照对角线元素排列</span></span><br><span class="line"></span><br><span class="line">tempNum=D(<span class="number">1</span>,<span class="number">1</span>); <span class="comment">%取第一个特征值作为初值</span></span><br><span class="line">pos=<span class="number">1</span>; <span class="comment">%标记第一个数</span></span><br><span class="line"><span class="keyword">for</span> h=<span class="number">1</span>:n</span><br><span class="line">  <span class="keyword">if</span> D(h,h)&gt;tempNum</span><br><span class="line">   tempNum=D(h,h);</span><br><span class="line">   pos=h;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%找到最大特征值及其对应的位置</span></span><br><span class="line">w=<span class="built_in">abs</span>(V(:,pos));</span><br><span class="line">w=w/sum(w); <span class="comment">%归一化处理</span></span><br><span class="line">t=D(pos,pos); <span class="comment">%t指最大特征值</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;准则层特征向量w=&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(w);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;准则层最大特征根t=&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">%一致性检验</span></span><br><span class="line">CI=(t-n)/(n<span class="number">-1</span>);</span><br><span class="line">RI=[<span class="number">0</span> <span class="number">0</span> <span class="number">0.52</span> <span class="number">0.89</span> <span class="number">1.12</span> <span class="number">1.26</span> <span class="number">1.36</span> <span class="number">1.41</span> <span class="number">1.46</span> <span class="number">1.49</span> <span class="number">1.52</span> <span class="number">1.54</span> <span class="number">1.56</span> <span class="number">1.58</span> <span class="number">1.59</span> <span class="number">1.60</span> <span class="number">1.61</span> <span class="number">1.615</span> <span class="number">1.62</span> <span class="number">1.63</span>];</span><br><span class="line">CR=CI/RI(n);</span><br><span class="line"><span class="keyword">if</span> CR&lt;<span class="number">0.10</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;此矩阵的一致性可以接受！&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;CI=&#x27;</span>);<span class="built_in">disp</span>(CI);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;CR=&#x27;</span>);<span class="built_in">disp</span>(CR);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">disp</span>(<span class="string">&#x27;此矩阵的一致性验证失败，请重新进行评分！&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>评价方法：</p><p>一类是主观，没有数据支撑，依赖专家经验</p><ul><li>层次分析法、综合指数法、模糊综合评判法、功效系数法</li></ul><p>另一类是客观，基于数据之间的关系或逻辑关系</p><ul><li>理想解法（TOPSIS）、主成分分析法、因子分析法</li></ul><h1 id="理想解法-TOPSIS"><a href="#理想解法-TOPSIS" class="headerlink" title="理想解法 TOPSIS"></a>理想解法 TOPSIS</h1><p>多指标评价方法</p><p>通过构造评价问题的正理想解和负理想解，即各指标的最优解和最劣解</p><p>计算每个方案靠近正理想解和远离负理想解的程度，来对方案进行排序，从而选出最优方案</p><p>一、用向量规范化的方法求得决策矩阵</p><ul><li>决策矩阵A &#x3D; (a<del>ij</del> )<del>mxn</del> ，规范化决策矩阵B &#x3D; (b<del>ij</del> )<del>mxn</del> </li><li>b<del>ij</del>  &#x3D; a<del>ij</del> &#x2F; 根号下i从1到m a<del>ij</del> ^2^ 的和，i &#x3D; 1<del>m，j &#x3D; 1</del> n，消除量纲</li></ul><ol><li><p>属性有成本型、效益型、区间型等，需要进行预处理，使得任一属性越优值越大</p></li><li><p>非量纲化</p></li><li><p>归一化</p><p>(1) 线性变换   效益型：b<del>ij</del>  &#x3D; a<del>ij</del> &#x2F; a<del>j</del>^max^  最优为1，最差不为0</p><p>​                        成本型：b<del>ij</del>  &#x3D; 1 - a<del>ij</del> &#x2F; a<del>j</del>^max^ 最优不为1，最差为0</p><p>(2) 标准0 - 1变换    效益型：b<del>ij</del>  &#x3D; (a<del>ij</del> - a<del>j</del>^min^ ) &#x2F; (a<del>j</del>^max^ - a<del>j</del>^min^ )</p><p>​                                 成本型：b<del>ij</del>  &#x3D; ( a<del>j</del>^max^ - a<del>ij</del> ) &#x2F; (a<del>j</del>^max^ - a<del>j</del>^min^ )</p><p>​                                 最优为1，最差为0</p><p>(3) 区间型属性变换   最优区间[a^0^ <del>j</del> , a^*^ <del>j</del>]，a^‘^ <del>j</del>为无法容忍下限，a^’‘^ <del>j</del> 为无法容忍上限</p><p>​                                    b<del>ij</del>  &#x3D; 1 - (a^0^ <del>j</del> - a<del>ij</del>) &#x2F; (a^0^ <del>j</del> - a^‘^ <del>j</del>)   a^‘^ <del>j</del> &lt;&#x3D; a<del>ij</del> &lt;&#x3D; a^0^ <del>j</del></p><p>​                                             1                                        a^0^ <del>j</del> &lt;&#x3D; a<del>ij</del> &lt;&#x3D; a^*^ <del>j</del>  </p><p>​                                             1 - (a<del>ij</del> - a^<em>^ <del>j</del>) &#x2F; (a^’‘^ <del>j</del> - a^</em>^ <del>j</del>)   a^*^ <del>j</del> &lt;&#x3D; a<del>ij</del> &lt;&#x3D; a^’‘^ <del>j</del></p><p>​                                             0                                        其它  </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clc,clear</span><br><span class="line"><span class="comment">% @定义函数</span></span><br><span class="line">x2=@(qujian,lb,ub,x)(<span class="number">1</span>-(qujian(<span class="number">1</span>)-x)./(qujian(<span class="number">1</span>)-lb)).*(x&gt;=lb&amp;x&lt;qujian(<span class="number">1</span>))+<span class="number">1.</span>*(x&gt;=qujian(<span class="number">1</span>)&amp;x&lt;=qujian(<span class="number">2</span>))+(<span class="number">1</span>-(x-qujian(<span class="number">2</span>))./(ub-qujian(<span class="number">2</span>))).*(x&gt;qujian(<span class="number">2</span>)&amp;x&lt;=ub)+<span class="number">0.</span>*(x&gt;ub)+<span class="number">0.</span>*(x&lt;lb)</span><br><span class="line">qujian=[];</span><br><span class="line">lb=;</span><br><span class="line">ub=;</span><br><span class="line">x2data=[];</span><br><span class="line">y2=x2(qujian,lb,ub,x2data)</span><br></pre></td></tr></table></figure><p>(4) 向量规范化   b<del>ij</del>  &#x3D; a<del>ij</del> &#x2F; 根号下i从1到m a<del>ij</del> ^2^ 的和</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n</span><br><span class="line">b(:,<span class="built_in">j</span>)=a(:,<span class="built_in">j</span>)/norm(a(:,<span class="built_in">j</span>));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>(5) 标准化处理   zscore(x)</p></li></ol><p>二、构成加权规范阵C &#x3D; (c<del>ij</del> )<del>mxn</del> </p><ul><li>给定各属性的权重w &#x3D;  [w<del>1</del> , …]</li><li>c<del>ij</del>  &#x3D; w<del>j</del>  * b<del>ij</del> ，i &#x3D; 1<del>m，j &#x3D; 1</del> n</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w=[];</span><br><span class="line">c=b.*<span class="built_in">repmat</span>(w,m,<span class="number">1</span>);</span><br><span class="line"><span class="comment">% repmat(w,m,n)将w复制m*n块</span></span><br></pre></td></tr></table></figure><p>三、确定正理想解C^*^ 和负理想解C^0^ </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cstar=<span class="built_in">max</span>(c);</span><br><span class="line">c0=<span class="built_in">min</span>(c);</span><br></pre></td></tr></table></figure><p>四、计算各方案到正理想解和负理想解的距离</p><ul><li>方案d<del>i</del> 到正理想解的距离  s^<em>^ <del>i</del>  &#x3D; 根号下j从1到n (c<del>ij</del> - c^</em>^ <del>j</del>)^2^ 的和，i &#x3D; 1~m</li><li>方案d<del>i</del> 到负理想解的距离  s^0^ <del>i</del>  &#x3D; 根号下j从1到n (c<del>ij</del> - c^0^ <del>j</del>)^2^ 的和，i &#x3D; 1~m</li></ul><p>五、计算各方案的排队指标值（综合评价指数）</p><ul><li>f^<em>^ <del>i</del>  &#x3D; s^0^ <del>i</del> &#x2F; (s^0^ <del>i</del> + s^</em>^ <del>i</del>)，i &#x3D; 1~m</li></ul><p>六、按f^*^ <del>i</del> 由大到小排列优劣</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m</span><br><span class="line">sstar(<span class="built_in">i</span>)=norm(c(<span class="built_in">i</span>,:)-cstar);</span><br><span class="line">s0(<span class="built_in">i</span>)=norm(c(<span class="built_in">i</span>,:)-c0);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">f=s0./(sstar+s0);</span><br><span class="line">[sf,ind]=<span class="built_in">sort</span>(f,<span class="string">&#x27;descend&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h1><p>最大化类内的相似性</p><p>最小化类间的相似性</p><p>两种：</p><p>Q型：对样品分类</p><p>R型：对变量（指标）分类</p><p>​  用于降维处理</p><p>距离： 一般用欧式</p><p>欧式距离：根号下(x<del>ik</del> - x<del>jk</del> )^2^之和  pdist(x)</p><p>决对距离：x<del>ik</del> - x<del>jk</del> 的差的绝对值之和  pdist(x, ’cityblock’)</p><p>明氏距离：1&#x2F;m根号下x<del>ik</del> - x<del>jk</del> 的差的m次方之和  pdist(x, ‘minkowski’, r)</p><p>切氏距离：max(abs(xi - xj))</p><p>方差加权距离：将原数据标准化后的欧式距离</p><p>​   根号下(x<del>ik</del> - x<del>jk</del> )^2^ &#x2F; s<del>k</del> ^2^ 之和</p><p>马氏距离：pdsit(x, ‘mahal’)</p><p>兰氏距离</p><p>杰氏距离</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[];</span><br><span class="line">d1=pdist(a);</span><br><span class="line">D=squareform(d1) <span class="comment">%d1必须为行向量，结果才为实对称矩阵</span></span><br><span class="line">S=<span class="built_in">tril</span>(squareform(d1)) <span class="comment">%得到三角阵</span></span><br></pre></td></tr></table></figure><p>变量间的相似度量——相似系数</p><p>|C<del>ab</del> | &lt;&#x3D; 1，且C<del>aa</del> &#x3D; 1</p><p>|C<del>ab</del> | &#x3D; 1时，当且仅当a &#x3D; kb，k !&#x3D; 0</p><p>C<del>ab</del> &#x3D; C<del>ba</del></p><p>夹角余弦：t从1到n中(x<del>ti</del> *  x<del>tj</del> )之和 &#x2F; (根号下t从1到n中x<del>ti</del>^2^ 之和 * 根号下t从1到n中x<del>tj</del>^2^ 之和)</p><p>相关系数：t从1到n中(x<del>ti</del> -x<del>i</del> 的平均值) *  (x<del>tj</del> -x<del>i</del> 的平均值 )之和 &#x2F; (根号下t从1到n中(x<del>ti</del> -x<del>i</del> 的平均值)^2^ 之和 * 根号下t从1到n中(x<del>tj</del> -x<del>i</del> 的平均值)^2^ 之和)</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[];</span><br><span class="line">R=corrcoef(a); <span class="comment">%计算相关系数</span></span><br><span class="line">a1=normc(a); <span class="comment">%将a各列化为单位向量</span></span><br><span class="line"><span class="built_in">j</span>=a1*a1；<span class="comment">%计算夹角余弦</span></span><br></pre></td></tr></table></figure><p>类间距离：  一般用最短</p><p>最短距离：两类中样品之间的最短距离  linkage()</p><p>最长距离;</p><p>重心距离：两类中各自样品平均值的距离</p><p>类平均距离：两类中所有两两样品之间距离的平均最为两类间的距离</p><p>离差平方和距离（ward）</p><p>谱系聚类法</p><ol><li>选择样本间距离的定义及类间juice的定义</li><li>计算n个样本两两之间的距离，得到距离矩阵D&#x3D;(d<del>ij</del>)</li><li>构造个类，每类只含一个样本（n个样本构造n类）</li><li>合并符合类间距离定义要求的两类为一个新类</li><li>计算新类与当前各类的距离，若类的个数为1，则进行步骤6，否则回到步骤4</li><li>画出聚类图</li><li>决定类的个数和类</li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b=[];</span><br><span class="line">d1=pdist(b);</span><br><span class="line">z1=linkage(d1); </span><br><span class="line">H=dendrogram(z1) <span class="comment">%生成聚类图</span></span><br><span class="line">T=cluster(z1,<span class="number">3</span>) <span class="comment">%输出聚类结果</span></span><br></pre></td></tr></table></figure><p>K—平均聚类算法</p><p>只适用于聚类均值有意义的场合</p><p>必须事先指定k的个数</p><p>对噪声和孤立点数据敏感</p><h2 id="pdist"><a href="#pdist" class="headerlink" title="pdist()"></a>pdist()</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D = pdist(X,Y,distance);</span><br><span class="line"><span class="comment">%X p*n</span></span><br><span class="line"><span class="comment">%Y q*n</span></span><br><span class="line"><span class="comment">%输出 D p*q，其(i,j)是X的第i行和Y的第j列之间的某种距离（distance）</span></span><br><span class="line"><span class="comment">%distance 可选一共八种</span></span><br></pre></td></tr></table></figure><h2 id="linkage"><a href="#linkage" class="headerlink" title="linkage()"></a>linkage()</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Z=linkage(X,<span class="string">&#x27;method&#x27;</span>,<span class="string">&#x27;metric&#x27;</span>);</span><br><span class="line"><span class="comment">%method 指代系统聚类方法</span></span><br><span class="line"><span class="comment">%metric 指代使用哪种距离</span></span><br></pre></td></tr></table></figure><h2 id="cluster"><a href="#cluster" class="headerlink" title="cluster()"></a>cluster()</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T=cluster(Z,<span class="string">&#x27;maxclust&#x27;</span>,k)</span><br></pre></td></tr></table></figure><h1 id="灰色关联分析与预测模型"><a href="#灰色关联分析与预测模型" class="headerlink" title="灰色关联分析与预测模型"></a>灰色关联分析与预测模型</h1><p>灰色系统应用：</p><ol><li>灰色关联分析</li><li>灰色预测</li><li>灰色决策</li><li>灰色预测控制</li></ol><p>白色系统：指一个系统的内部特征是完全已知的，即系统的信息是完全充分的</p><p>黑色系统：指一个系统的内部信息对外界来说是一无所知的，只有通过它与外界的联系来加以观测研究</p><p>灰色系统：一部分信息是已知的，另一部分信息是未知的，系统内部各因素间有不确定的关系</p><p>灰色关联度与优势分析</p><p>计算某一个待比较的数列与参照物之间的相关程度</p><p>统一量纲</p><p>选取参考数列X<del>0</del> </p><p>比较数列X<del>i</del> </p><p>关联度计算</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%85%B3%E8%81%94%E5%BA%A6%E8%AE%A1%E7%AE%97.png" alt="关联度计算"></p><p>ρ为分辨系数，取值0 ~ 1，ρ越大，分辨率越大，ρ越小，分辨率越小，差异越大</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%85%B3%E8%81%94%E5%BA%A6%E5%9D%87%E5%80%BC.png" alt="关联度均值"></p><p>每一个数都有一个关联度，故将一列关联度的平均值作为该列的关联度（相对于参考列）</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%AD%A3%E8%B4%9F%E5%85%B3%E8%81%94.png" alt="正负关联"></p><h1 id="灰色预测法"><a href="#灰色预测法" class="headerlink" title="灰色预测法"></a>灰色预测法</h1><p>对在一定范围内变化的、与时间有关的灰色过程进行预测</p><p><strong>等时距</strong>观测的反映预测对象特征的一系列数量值（注意是等时距）</p><p>四种类型：</p><p>灰色时间序列预测</p><p>畸变预测：预测异常值出现的时刻</p><p>系统预测：预测系统中众多变量间的相互协调关系的变化</p><p>拓扑预测：预测定值所发生的时间点</p><p>灰色生成数列</p><p>一切灰色序列都能通过某种生成弱化其随机性，显现其规律性</p><p>数据生成的常用方式有累加生成、累减生成和加权生成</p><ol><li>累加生成：把数列各项（时刻）数据依次累加的过程称为累加生成过程</li></ol><p>​  由累加生成过程所得的数列称为累加生成数列</p><ol start="2"><li><p>累减生成：对于原始数据列依次做前后相邻的两个数据相减的运算过程称为累减过程</p><p>​   累减为累加的逆过程</p><p>​   累减所得的数类似导数，称为灰导数</p></li><li><p>加权邻值生成：X^(0)^ (k)为前邻值，X^(0)^ (k–1)为后邻值</p><p>​   Z^(0)^ (k) &#x3D; ɑX^(0)^ (k) + (1-ɑ)X^(0)^ (k–1)，k&#x3D;2,3,…,n</p><p>​   ɑ为生成系数，取值0~ 1</p><p>​   当ɑ &#x3D; 0.5时，则称为均值生成数，也称等权邻值生成数</p></li></ol><p>灰色模型 GM(1,1)</p><h2 id="数据的检验与处理"><a href="#数据的检验与处理" class="headerlink" title="数据的检验与处理"></a>数据的检验与处理</h2><p>设原始数列x^(0)^ </p><p>计算数列的级比   ⋋(k) &#x3D; x^(0)^ (k-1) &#x2F; x^(0)^ (k)</p><p>如果所有的级比都落在可容覆盖区间X &#x3D; (e^(-2)&#x2F;(n+1)^, e^2&#x2F;(n+1)^)内，则可以进行灰色预测</p><p>否则对数据进行适当的变换处理，如平移变换：取c使得数据列 y^(0)^(k) &#x3D; x^(0)^ (k) + c的级比都落在可容覆盖内</p><h2 id="建立GM-1-1-模型"><a href="#建立GM-1-1-模型" class="headerlink" title="建立GM(1,1)模型"></a>建立GM(1,1)模型</h2><p>生成1次累加数列x^(1)^ </p><p>定义灰导数d(k)&#x3D;x^(0)^ (k)</p><p>令z^(1)^ 为数列x^(1)^的邻值生成数列，ɑ可能为1&#x2F;2</p><p>定义GM(1,1)的灰微分方程模型为d(k) + ɑz^(1)^(k) &#x3D; b，即x^(0)^ (k) + ɑz^(1)^(k) &#x3D; b</p><p>x^(0)^ (k) 称为灰导数，ɑ称为发展系数，z^(1)^(k)称为白化背景值，b称为灰作用量</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E7%9F%A9%E9%98%B5%E5%90%91%E9%87%8F.png" alt="灰色预测矩阵向量"></p><p>GM(1,1)模型可表示为Y &#x3D; Bu</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/u%E7%9A%84%E9%A2%84%E6%B5%8B%E5%80%BC.png" alt="u的预测值"></p><p>&#x2F;&#x2F;得到u后便可以进行离散值的计算（离散型）</p><p>GM(1,1)的白化型（连续型）</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/GM%E7%99%BD%E5%8C%96%E5%9E%8B.png" alt="GM白化型"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/GM%E6%B1%82%E8%A7%A3.png" alt="GM求解"></p><h2 id="检验预测值"><a href="#检验预测值" class="headerlink" title="检验预测值"></a>检验预测值</h2><ol><li>残差检验<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%AE%8B%E5%B7%AE.png" alt="残差"></li></ol><p>​       如果绝对值&lt;0.1，则认为达到较高的要求</p><p>​       如果绝对值&lt;0.2，则认为达到一般要求</p><ol start="2"><li><p>级比偏差值检验</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%81%8F%E5%B7%AE.png" alt="偏差"></p></li></ol><p>​        如果绝对值&lt;0.1，则认为达到较高的要求</p><p>​如果绝对值&lt;0.2，则认为达到一般要求</p><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><p>要有相关章节或部分写明数据预处理</p><ul><li>数据清洗（清理）：<ul><li>清除噪声</li><li>缺失值处理<ul><li>删除记录</li><li>不处理</li><li>数据插补<ul><li>均值、众数、中位数</li><li>使用固定值（查资料）</li><li>最近临插补（在记录中找到与缺失样本最接近的样本的该属性插补）<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB.png" alt="欧几里得距离"></li></ul></li><li>回归方法（工作量大、不建议）（根据已有数据和与其有关的其它变量（因变量）的数据建立拟合模型来预测缺失的属性）</li><li>插值法（利用已知点建立合适的插值函数⨍(x)，未知值由对应点x<del>i</del>求出的函数值⨍(x<del>i</del>)近似代替）<ul><li>拉格朗日插值法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%E6%B3%95.png" alt="拉格朗日插值法"></li></ul></li><li>牛顿插值法<ul><li>​<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E7%89%9B%E9%A1%BF%E6%8F%92%E5%80%BC%E6%B3%95.png" alt="牛顿插值法"></li></ul></li></ul></li></ul></li></ul></li><li>异常值发现<ul><li>正态分布的数据，平均值加上和减去3σ，超过这个范围就是异常值</li><li>箱线图 boxplot()<ul><li>上四分之一到下四分之一称为IQR</li><li>超过（上四分之一 + 1.5 * IQR 和 下四分之一 - 1.5 * IQR）范围的数为异常值</li></ul></li><li>计算n维数据中所有样本间的测量距离，如果所有样本S中有大于等于数量p的样本到某个样本S<del>i</del>的距离比b大，那么样本S<del>i</del>是数据集S的一个噪声数据</li></ul></li><li>异常值处理<ul><li>删除记录</li><li>视为缺失值</li><li>平均值修正（可用前后两个观测值的平均值修正）</li><li>不处理</li></ul></li></ul></li></ul><p></p><p>数据集成：将多个数据源合并成一致的数据存储，构成一个完整的数据集</p><p>数据变换（转换）：将一种格式的数据转换成另一种格式的数据（如规范化）</p><p>​                                   使数据处于完美的正态分布，可以简单的用平均值和方差描述数据分布（平均值、众数、中位数三值相同）</p><p>​   归一化（最大—最小规范化、零—均值规范化、小数定标规范化）</p><p>数据规约（消减）：通过聚集、删除冗余属性或聚类等方法来压缩数据</p><p>数据的特征工程、数据降维算法</p><h1 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h1><p>去掉无用特征</p><p>去除冗余特征、生成新特征</p><p>数据预处理</p><ul><li>特征使用</li><li>特征获取</li><li>特征处理</li><li>特征选择<ul><li>过滤法<ul><li>按照发散性或者相关性对各个特征进行评分，通过设定阈值或者待选择阈的个数来选择特征</li></ul></li><li>包装法<ul><li>每次选择若干特征，或者排除若干特征训练，观察目标函数（通常是预测效果评分），判断哪些特征有用或无用</li></ul></li><li>嵌入法<ul><li>使用机器学习的某些算法和模型进行训练，得到各个特征的权值系数，并根据系数从大到小选择特征</li></ul></li></ul></li></ul><p>主成分分析（对降维出来的主成分要有一个解释，每个主成分都代表什么）</p><p>累计贡献率大于85就可以了</p><h1 id="插值与拟合"><a href="#插值与拟合" class="headerlink" title="插值与拟合"></a>插值与拟合</h1><p>是数学建模中的一种基本的数据分析手段</p><p>线性插值、拉格朗日插值、牛顿插值</p><p>内部缺少用插值，预测之后用拟合</p><p>插值与灰色预测的区别就是不等时距（连续）</p><p>拟合适用范围</p><ul><li>小样本预测</li><li>对未来很小的范围做预测</li><li>求出x、y后对函数进行求导</li></ul><p>插值与拟合的区别：</p><ul><li>插值函数过已知点，而拟合函数不一定过已知点</li><li>插值主要求函数值，而拟合主要求函数关系，从而进行预测等进一步的分析</li></ul><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><p>拉格朗日插值法（会有Runge现象）</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">y=lagrange(x0,y0,x);</span><br><span class="line"><span class="comment">%x0,y0为插值点</span></span><br><span class="line"><span class="comment">%x,y为被插值点和插值结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">lagrange</span><span class="params">(x0,y0,x)</span></span></span><br><span class="line">n=<span class="built_in">length</span>(x0);</span><br><span class="line">m=<span class="built_in">length</span>(x);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m</span><br><span class="line">  z=x(<span class="built_in">i</span>);</span><br><span class="line">  s=<span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">for</span> k=<span class="number">1</span>:n</span><br><span class="line">  p=<span class="number">1.0</span>;</span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">j</span>~=k</span><br><span class="line">  p=p*(z-x0(<span class="built_in">j</span>))/(x0(k)-x0(<span class="built_in">j</span>));</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  s=p*y0(k)+s;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  y(<span class="built_in">i</span>)=s;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>假设有n个(x，y)值，轮流给每一个x值都单独做一条经过改x值的点(x，1)的线，其余点为(x，0)</p><p>之后将每个x值对应的线的函数乘以其对应的y，再相加</p><p>其结果为经过所有点的线的函数</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC.png" alt="拉格朗日插值"></p><p>高次插值的Runge现象</p><p>所有人都想当然的认为插值多项式的次数越高，插值精度越高</p><p>Runge发现上述结论仅仅在插值多项式的次数不超过7次时成立</p><p>插值多项式的次数超过7时，会出现严重的振荡现象，称之为Runge现象</p><p>在实际中不应使用7次以上的插值</p><p>避免Runge现象的常用方法：将插值区间分成若干区间，在小区间内用低次（二次、三次）插值，即分段低次插值，如样条函数插值</p><p>一维插值</p><p>优先使用样条插值</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yi=interp1(x,y,xi,<span class="string">&#x27;method&#x27;</span>);</span><br><span class="line"><span class="comment">%x,y为插值点</span></span><br><span class="line"><span class="comment">%xi,yi为被插值点和插值结果</span></span><br><span class="line"><span class="comment">%method为插值方法</span></span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;*&#x27;</span>,xi,yi);</span><br><span class="line">grid;<span class="comment">%生成网格点</span></span><br></pre></td></tr></table></figure><p>‘nearest’——最邻近插值</p><p>‘linear’——线性插值</p><p>‘spline’——三次样条插值</p><p>‘cubic’——立方插值</p><p>默认是线性插值</p><p>二维插值</p><p>优先使用立方插值</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zi=interp2(x,y,z,xi,yi&#x27;,<span class="string">&#x27;method&#x27;</span>);</span><br><span class="line"><span class="comment">%x,y,z为插值点，z为在(x,y)处的值</span></span><br><span class="line"><span class="comment">%yi需要转置一下</span></span><br><span class="line">mesh(x,y,z);<span class="comment">%构建空间曲面网格图，绘制三维图像</span></span><br><span class="line"><span class="comment">%plot3()空间曲线</span></span><br><span class="line"><span class="comment">%surf()空间曲面</span></span><br><span class="line"><span class="comment">%meshc和surfc可在曲面下方画等高线</span></span><br><span class="line"><span class="comment">%meshz和surfz画垂帘图</span></span><br><span class="line">contour(xi,yi,zi,<span class="number">20</span>,<span class="string">&#x27;r&#x27;</span>)<span class="comment">%绘制等高线，一共20条</span></span><br><span class="line">[<span class="built_in">i</span>,<span class="built_in">j</span>]=<span class="built_in">find</span>(zi==<span class="built_in">min</span>(<span class="built_in">min</span>(zi)))<span class="comment">%寻找坐标</span></span><br><span class="line">[xi,yi]=<span class="built_in">meshgrid</span>(<span class="number">0</span>:<span class="number">50</span>:<span class="number">5600</span>,<span class="number">0</span>:<span class="number">50</span>:<span class="number">4800</span>);</span><br><span class="line"><span class="comment">%相当于xi=0:50:5600;yi&#x27;=0:50:4800;</span></span><br></pre></td></tr></table></figure><p>‘nearest’——最邻近插值</p><p>‘linear’——双线性插值</p><p>‘spline’——双三次样条插值</p><p>‘cubic’——双立方插值</p><p>默认是双线性插值</p><p>散乱点插值</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xi,yi]=<span class="built_in">meshgrid</span>(<span class="number">0</span>:<span class="number">50</span>:<span class="number">5600</span>,<span class="number">0</span>:<span class="number">50</span>:<span class="number">4800</span>);</span><br><span class="line">zi=griddata(x,y,z,xi,yi,<span class="string">&#x27;method&#x27;</span>);</span><br><span class="line">contour(xi,yi,zi,[<span class="number">-5</span> <span class="number">-5</span>],<span class="string">&#x27;r&#x27;</span>)<span class="comment">%只画值为-5的等高线</span></span><br><span class="line"><span class="built_in">hold</span> on;<span class="comment">%多个画图一起显示</span></span><br></pre></td></tr></table></figure><h2 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h2><ul><li>线型的选择（选择拟合函数）<ul><li>是拟合计算的关键和难点</li><li>通常主要根据专业知识和散点图确定线型</li></ul></li><li>线型中参数的计算<ul><li>线性拟合中可采用最小二乘法</li><li>非线性拟合则要应用Gauss-Newton迭代法</li></ul></li></ul><h3 id="多项式拟合"><a href="#多项式拟合" class="headerlink" title="多项式拟合"></a>多项式拟合</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[a,S]=polyfit(x,y,n)</span><br><span class="line"><span class="comment">% n 为多项式的次数</span></span><br><span class="line"><span class="comment">% a 为多项式的系数</span></span><br><span class="line"><span class="comment">% S 是一个矩阵，用来分析拟合效果</span></span><br></pre></td></tr></table></figure><h3 id="非线性拟合"><a href="#非线性拟合" class="headerlink" title="非线性拟合"></a>非线性拟合</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun=@(b,t)b(<span class="number">1</span>)*<span class="built_in">exp</span>(-t/b(<span class="number">2</span>))+b(<span class="number">3</span>)*<span class="built_in">exp</span>(-t/b(<span class="number">4</span>))</span><br><span class="line">[b,r]=nlinfit(x,y,fun,b0,option)</span><br><span class="line"><span class="comment">% fun 为拟合函数</span></span><br><span class="line"><span class="comment">% option 为拟合选项</span></span><br><span class="line"><span class="comment">% b 为拟合参数</span></span><br><span class="line"><span class="comment">% r 为拟合残差</span></span><br></pre></td></tr></table></figure><h3 id="Matlab拟合工具箱"><a href="#Matlab拟合工具箱" class="headerlink" title="Matlab拟合工具箱"></a>Matlab拟合工具箱</h3><ul><li>输入cftool</li><li>可选择的拟合函数<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/cftool.png" alt="cftool"></li></ul></li></ul><h1 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h1><p>可以用在机理问题</p><p>相关性分析就是判定一下变量与变量之间有无关联，关联程度是多少</p><p>回归分析就是构建变量与变量值间具体的关系式，进而找出变量之间具体的联系</p><p>用途：预测、控制</p><ul><li>先确定是什么回归</li><li>参数有哪些</li><li>检验参数合不合理（三种）</li><li>预测和控制</li></ul><h2 id="一元线性回归分析"><a href="#一元线性回归分析" class="headerlink" title="一元线性回归分析"></a>一元线性回归分析</h2><ul><li>用实验值（样本值）对 β<del>0</del> 、β<del>1</del> 和 σ 作点估计<ul><li>一元线性回归模型<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B.png" alt="一元线性回归模型"></li></ul></li><li>最小二乘法<ul><li>普通最小二乘法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95.png" alt="最小二乘法"></li></ul></li><li>令偏导数为0，求得<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%9E%81%E5%80%BC.png" alt="最小二乘极值"></li></ul></li><li>普通最小二乘参数估计量的离差形式<ul><li>只有函数连续光滑才能求导，但样本为离散值</li><li>记<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%99%AE%E9%80%9A%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1%E9%87%8F%E7%9A%84%E7%A6%BB%E5%B7%AE%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0.png" alt="普通最小二乘参数估计量的离差形式参数"></li><li>解为<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1.png" alt="参数估计"></li></ul></li><li>随机误差项方差的估计量<ul><li>记e<del>i</del> &#x3D; y<del>i</del> - ŷ<del>i</del>为第i个样本观测点的残差</li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%9A%8F%E6%9C%BA%E8%AF%AF%E5%B7%AE%E9%A1%B9%E6%96%B9%E5%B7%AE%E7%9A%84%E4%BC%B0%E8%AE%A1%E9%87%8F.png" alt="随机误差项方差的估计量"></li></ul></li></ul></li></ul></li><li>对回归系数 β<del>0</del> 、β<del>1</del> 作假设检验<ul><li>显著性水平（ɑ &lt; 5%）<ul><li>估算总体参数落在某一个区间可能犯错的概率</li></ul></li><li>回归方程的显著性检验<ul><li>对回归方程 Y &#x3D; β<del>0</del> + β<del>1</del>x 的显著性检验，归结为对假设H<del>0</del>：β<del>1</del> &#x3D; 0，H<del>1</del>：β<del>1</del> !&#x3D; 0进行检验</li><li>假设H<del>0</del>：β<del>1</del> &#x3D; 0 被拒绝，则回归显著，认为 y 与 x 存在线性关系，所求的线性回归方程有意义</li><li>否则回归不显著，y 与 x 的关系不能用一元线性回归模型来描述，所得的回归方程也无意义</li></ul></li><li>三种假设性检验（**<u>目前都暂时不懂</u>**）<ul><li>n 代表样本大小</li><li>F 检验法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/F%E6%A3%80%E9%AA%8C%E6%B3%95.png" alt="F检验法"></li><li>其中<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/F%E6%A3%80%E9%AA%8C%E6%B3%95U.png" alt="F检验法U"></li><li>当F &gt; F<del>1-ɑ</del>(1,n - 2) 时，拒绝H<del>0</del>；否则就接受H<del>0</del></li></ul></li><li>t 检验法<ul><li>适用于样本量较小，30个</li><li>记<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/t%E6%A3%80%E9%AA%8C%E6%B3%95.png" alt="t检验法"></li><li>当|T| &gt; t<del>1-ɑ&#x2F;2</del>(n - 2) 时，拒绝H<del>0</del>；否则就接受H<del>0</del></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/t%E6%A3%80%E9%AA%8C%E6%B3%95Lxx.png" alt="t检验法Lxx"></li></ul></li><li>r 检验法<ul><li>记<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/r%E6%A3%80%E9%AA%8C%E6%B3%95.png" alt="r检验法"></li><li>当|r| &gt; r<del>1-ɑ</del> 时，拒绝H<del>0</del>；否则就接受H<del>0</del></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/r1-a%E8%AE%A1%E7%AE%97.png" alt="r~1-a~计算"></li></ul></li></ul></li><li>回归系数的置信区间<ul><li>β<del>0</del> 、β<del>1</del> 、σ^2^ 能取得的范围</li><li>β<del>0</del> 、β<del>1</del> 置信水平为1 - ɑ 的置信区间分别为<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B41.png" alt="置信区间1"></li><li>σ^2^ 置信水平为1 - ɑ 的置信区间为<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B42.png" alt="置信区间2"></li></ul></li></ul></li><li>在 x&#x3D;x<del>0</del> 处对 y 作预测，对 y 作区间估计<ul><li>预测<ul><li>用 y<del>0</del> 的回归值 ŷ<del>0</del> 作为 y<del>0</del> 的预测值</li><li>y<del>0</del> 置信水平为1 - ɑ 的预测区间为<ul><li>![y<del>0</del> 置信水平为1 - ɑ 的预测区间](数学建模笔记.assets&#x2F;y0 置信水平为1 - ɑ 的预测区间.png)</li></ul></li></ul></li><li>控制<ul><li>y 的值以1 - ɑ的概率落在指定区间(y’, y’‘)</li><li>只要控制x满足于<img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%8E%A7%E5%88%B6x.png" alt="控制x"></li><li>要求 y’‘ - y’ &gt;&#x3D; 2δ(x)</li><li>若 ŷ - δ(x) &#x3D; y’，ŷ - δ(x) &#x3D; y’‘分别有解 x’ 和 x’‘，即ŷ - δ(x’) &#x3D; y’，ŷ - δ(x’‘) &#x3D; y’‘</li><li>则(x’, x’‘)就是所求 x 的控制区间</li></ul></li></ul></li></ul><h2 id="可线性化的一元非线性回归（曲线回归）"><a href="#可线性化的一元非线性回归（曲线回归）" class="headerlink" title="可线性化的一元非线性回归（曲线回归）"></a>可线性化的一元非线性回归（曲线回归）</h2><p>曲线回归建模的非线性目标函数 y &#x3D; f(x)</p><p>通过某种数学变换 v &#x3D; v(y)，u &#x3D; u(x)使之“线性化”化为一元线性函数 v &#x3D; a + bu</p><p>利用线性最小二乘估计的方法估计出参数 a 和 b</p><p>用一元线性回归方程来描述 v 和 u 间的统计规律性</p><p>再利用逆变换 y &#x3D; v^-1^(v)，x &#x3D; u^-1^(u) 还原为目标函数形式的非线性回归方程</p><p>简单来说就是利用换元法，将非线性变为线性 </p><h3 id="非线性回归代码"><a href="#非线性回归代码" class="headerlink" title="非线性回归代码"></a>非线性回归代码</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%确定回归系数（求解系数）</span></span><br><span class="line">[<span class="built_in">beta</span>,r,J]=nlinfit(x,y,<span class="string">&#x27;model&#x27;</span>,beta0)</span><br><span class="line"><span class="comment">% x 为n*m维</span></span><br><span class="line"><span class="comment">% y 为n维</span></span><br><span class="line"><span class="comment">% model 事先用M文件定义的非线性函数</span></span><br><span class="line"><span class="comment">% beta0 为回归系数初值</span></span><br><span class="line"><span class="comment">% J 为Jacobi矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%非线性回归（单纯求解）</span></span><br><span class="line">nlintool(x,y,<span class="string">&#x27;model&#x27;</span>,beta0,alpha)</span><br><span class="line"></span><br><span class="line"><span class="comment">%预测</span></span><br><span class="line">[Y,DELTA]=nlpredci(<span class="string">&#x27;model&#x27;</span>,x,<span class="built_in">beta</span>,r,J)</span><br><span class="line"><span class="built_in">plot</span>()</span><br></pre></td></tr></table></figure><h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><p>一般称 <img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%AB%98%E6%96%AF-%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B.png" alt="高斯-马尔可夫线性模型"></p><p>为高斯—马尔可夫线性模型（k元线性回归模型），并简记为 (Y,Xβ,σ^2^I<del>n</del>)</p><ul><li>用实验值（样本值）对 β 和 σ^2^ 作点估计和假设检验，从而建立 y 与 x<del>1</del>、……、x<del>k</del> 之间的数量关系<ul><li>对 β 和 σ^2^ 作点估计<ul><li>最小二乘法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E8%B4%9D%E5%A1%94.png" alt="多元线性回归贝塔"></li><li>得到的 β 的估计值代入方程，该方程称为经验回归方程</li><li>β 的估计值称为经验回归系数</li></ul></li></ul></li><li>多项式回归<ul><li>x 的次数不为1</li><li>同理上述，得到的 β 的估计值代入方程，该方程称为回归多项式</li><li>若令 x<del>i</del> &#x3D; x^i^，i &#x3D; 1，……，k；多项式回归模型变为多元线性回归模型</li></ul></li><li>假设检验<ul><li>H<del>0</del>：β<del>0</del> &#x3D; β<del>1</del> &#x3D; … &#x3D; β<del>k</del> &#x3D; 0</li><li>n 代表样本大小，k 代表自变量的个数</li><li>F 检验法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%A4%9A%E5%85%83F%E6%A3%80%E9%AA%8C.png" alt="多元F检验"></li><li>当F &gt; F<del>1-ɑ</del>(k,n - k - 1) 时，拒绝H<del>0</del>；否则就接受H<del>0</del></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%A4%9A%E5%85%83F%E6%A3%80%E9%AA%8CU%E5%92%8CQ.png" alt="多元F检验U和Q"></li></ul></li><li>r 检验法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%A4%9A%E5%85%83r%E6%A3%80%E9%AA%8C.png" alt="多元r检验"></li></ul></li></ul></li></ul></li><li>在 x<del>1</del> &#x3D; x<del>01</del>，x<del>2</del> &#x3D; x<del>02</del>，……，x<del>k</del> &#x3D; x<del>0k</del> 处，对 y 的值作预测和控制，即对 y 作区间估计<ul><li>点预测（预测单个 y）</li><li>区间预测<ul><li>y 的 1 -  ɑ 的预测（置信）区间为(ŷ<del>1</del>，ŷ<del>2</del>)</li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%A4%9A%E5%85%83%E5%8C%BA%E9%97%B4%E9%A2%84%E6%B5%8B.png" alt="多元区间预测"></li></ul></li></ul></li></ul><h3 id="多元线性回归代码"><a href="#多元线性回归代码" class="headerlink" title="多元线性回归代码"></a>多元线性回归代码</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%确定回归系数的点估计值</span></span><br><span class="line"><span class="comment">% X 的第一列全为1</span></span><br><span class="line">X=[<span class="built_in">ones</span>(n,<span class="number">1</span>) x]</span><br><span class="line">b=regress(Y,X)</span><br><span class="line"></span><br><span class="line"><span class="comment">%求回归系数的点估计和区间估计、并检验回归模型</span></span><br><span class="line">[b,bint,r,rint,stats]=regress(Y,X,alpha)</span><br><span class="line"><span class="comment">% bint 为回归系数的区间估计</span></span><br><span class="line"><span class="comment">% r 为残差</span></span><br><span class="line"><span class="comment">% rint 为置信区间</span></span><br><span class="line"><span class="comment">% stats 用于检验回归模型的统计量，有三个数值：相关系数 r^2^ 、F值、与 F 对应的概率 p</span></span><br><span class="line"><span class="comment">% alpha 为显著性水平（默认为0.05）</span></span><br><span class="line"><span class="comment">%相关系数 r^2^ 越接近1，说明回归方程越显著</span></span><br><span class="line"><span class="comment">%F &gt; F~1-ɑ~(k,n - k - 1) 时，拒绝H~0~，F 越大，说明回归方程越显著</span></span><br><span class="line"><span class="comment">%与 F 对应的概率 p &lt; ɑ 时拒绝H~0~，回归模型成立</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%画出残差及其置信区间</span></span><br><span class="line">rcoplot(r,rint)</span><br><span class="line"></span><br><span class="line"><span class="comment">%预测</span></span><br><span class="line">z=b(<span class="number">1</span>) + b(<span class="number">2</span>) * x</span><br><span class="line"><span class="built_in">plot</span>(x,Y,<span class="string">&#x27;k+&#x27;</span>,x,z,<span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="多项式回归代码"><a href="#多项式回归代码" class="headerlink" title="多项式回归代码"></a>多项式回归代码</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%一元多项式回归</span></span><br><span class="line">[p,S]=polyfit(x,y,m)<span class="comment">%确定多项式系数</span></span><br><span class="line"><span class="comment">% m 为多项式的阶数</span></span><br><span class="line"><span class="comment">% p 为多项式的系数</span></span><br><span class="line"><span class="comment">% S 是一个矩阵，用来估计预测误差</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%一元多项式回归命令</span></span><br><span class="line">polytoolx,y,m)</span><br><span class="line"></span><br><span class="line">Y=polyval(p,x)</span><br><span class="line"><span class="comment">%求polyfit所得的回归多项式在x处的预测值</span></span><br><span class="line">[Y,DELTA]=polyconf(p,x,S,alpha)</span><br><span class="line"><span class="comment">%求 polyfit 所得的回归多项式在 x 处的预测值 Y 及预测值的显著性为 1-alpha 的置信区间 Y+-DELTA</span></span><br><span class="line"><span class="comment">% alpha 默认为0.05</span></span><br></pre></td></tr></table></figure><h3 id="多元二项式回归代码"><a href="#多元二项式回归代码" class="headerlink" title="多元二项式回归代码"></a>多元二项式回归代码</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rstool(x,y,<span class="string">&#x27;model&#x27;</span>,alpha)</span><br><span class="line"><span class="comment">% x 为n*m维</span></span><br><span class="line"><span class="comment">% y 为n维</span></span><br><span class="line"><span class="comment">% alpha 默认为0.05</span></span><br><span class="line"><span class="built_in">beta</span>,rmse</span><br></pre></td></tr></table></figure><p>model 有4种</p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%A4%9A%E5%85%83%E4%BA%8C%E9%A1%B9%E5%BC%8F%E6%A8%A1%E5%9E%8B.png" alt="多元二项式模型"></p><h2 id="逐步回归分析"><a href="#逐步回归分析" class="headerlink" title="逐步回归分析"></a>逐步回归分析</h2><p>“最优”的回归方程就是包含所有对 Y 有影响的变量，而不包含对 Y 影响不显著的变量的回归方程</p><p>基本思想</p><ul><li>从一个变量开始，按自变量对 Y 作用的显著程度，从大到小依次引入回归方程</li><li>当引入的自变量使得对 Y 作用的显著程度下降时，要将其剔除</li><li>引入一个自变量或从回归方程中剔除一个自变量，为逐步回归的一步</li><li>对于每一步都要进行 F 检验，以确保每次引入新的显著性变量前，回归方程中只包含对 Y 作用显著的变量</li></ul><h3 id="逐步回归代码"><a href="#逐步回归代码" class="headerlink" title="逐步回归代码"></a>逐步回归代码</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stepwise(x,y,inmodel,alpha)</span><br><span class="line"><span class="comment">% x 为n*m维，y 为n*1维</span></span><br><span class="line"><span class="comment">% inmodel 为矩阵的列数指标，给出初始模型中包括的子集（缺省市设定为全部自变量</span></span><br><span class="line"><span class="comment">%运行 stepwise 时会产生三个窗口 Stepwise Plot、Stepwise Table、Stepwise History</span></span><br><span class="line"><span class="comment">% Stepwise Plot 显示各项的回归系数机器置信区间</span></span><br><span class="line"><span class="comment">% Stepwise Table 列出统计表，包括回归系数机器置信区间，以及模型的统计量剩余标准差（RMSE）、相关系数（R-square）、F 值、与 F 对应的概率 p</span></span><br></pre></td></tr></table></figure><h2 id="cftool"><a href="#cftool" class="headerlink" title="cftool"></a>cftool</h2><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/cftool-1725428869668-1.png" alt="cftool"></p><h1 id="综合评价"><a href="#综合评价" class="headerlink" title="综合评价"></a>综合评价</h1><p>运用多个指标对多个参评单位进行评价的方法，称为多变量综合评价方法，又称为综合评价法</p><p>基本思想是将多个指标转化为一个能够反映综合情况的指标来进行评价</p><p>特点：</p><ul><li>不是逐个指标顺次完成的，而是通过一些特殊的方法将多个指标的评价同时完成</li><li>一般根据指标的重要性进行加权处理</li><li>评价结果不再是具有具体含义的统计指标，而是以指数或分值表示参评单位“综合状况”的排序</li></ul><p>作用：</p><ul><li>分类</li><li>比较、排序</li><li>考察某一综合指标的整体实现程度（对某一事物做出整体评价）</li></ul><p>五要素：</p><ul><li>被评价对象</li><li>评价指标</li><li>权重系数</li><li>综合评价模型</li><li>评价者</li></ul><h2 id="一般步骤："><a href="#一般步骤：" class="headerlink" title="一般步骤："></a>一般步骤：</h2><ul><li>确定评价目的</li><li>建立评价指标体系</li><li>对指标数据做预处理<ul><li>指标的类型<ul><li>定性<ul><li>优、良、中、一般、差；很高、高、一般、低、很低</li></ul></li><li>定量<ul><li>极大型（正向）、极小型（逆向）、居中型</li></ul></li></ul></li><li>指标一致化<ul><li>定性指标的量化（评分法）<ul><li>很高、高、一般、低、很低</li><li>9       7        5       3        1</li></ul></li><li>定量指标的一致化（将其它指标转化为极大型指标）<ul><li>对于极小型<ul><li>一个正数减去极小型</li><li>极小型取倒数</li></ul></li><li>对于居中型<ul><li>设定上界M、下界m</li><li>若数 m &lt;&#x3D; a &lt;&#x3D; (m+M)&#x2F;2，则 b &#x3D; 2(a-m)&#x2F;(M-m)</li><li>若数 (m+M)&#x2F;2 &lt;&#x3D; a &lt;&#x3D; M，则 b &#x3D; 2(M-a)&#x2F;(M-m)</li></ul></li></ul></li></ul></li><li>无量纲化<ul><li>向量归一化<ul><li>缺点：每个数都除以总和会使数据趋近于0，若其它数据不是使用向量归一化处理，仍会出现“大数吃小数”的现象</li></ul></li><li>极差变化法<ul><li>a^<em>^<del>j</del> &#x3D; max{a^</em>^<del>ij</del>}，a^0^<del>j</del> &#x3D; min{a^*^<del>ij</del>}</li><li>正向指标：x^<em>^<del>ij</del> &#x3D; (a<del>ij</del> - a^0^<del>j</del>)&#x2F;(a^</em>^<del>j</del> - a^0^<del>j</del>)</li><li>逆向指标：x^<em>^<del>ij</del> &#x3D; (a^</em>^<del>j</del> - a<del>ij</del>)&#x2F;(a^*^<del>j</del> - a^0^<del>j</del>)</li></ul></li><li>线性比例变化法<ul><li>正向指标：b<del>ij</del>  &#x3D; a<del>ij</del> &#x2F; a<del>j</del>^max^</li><li>逆向指标：b<del>ij</del>  &#x3D; a<del>j</del>^min^ &#x2F; a<del>ij</del></li><li>缺点：数据处理后微微右倾</li></ul></li></ul></li></ul></li><li>确定各个评价指标的权重<ul><li>主观定权法<ul><li>专家评分法</li><li>成对比较法</li><li>Saaty权重法</li></ul></li><li>客观定权法<ul><li>模糊定权法</li><li>秩和比法</li><li>熵权法</li><li>相关系数法</li><li>其它</li></ul></li></ul></li><li>求综合评价值——将单项评价值综合而成<ul><li>常见综合评价方法<ul><li>线性加权综合法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E7%BA%BF%E6%80%A7%E5%8A%A0%E6%9D%83%E7%BB%BC%E5%90%88%E6%B3%95.png" alt="线性加权综合法"></li><li>适用条件：各评价指标之间相互独立</li><li>对不完全独立的情况，其结果将导致各指标间信息的重复，使评价结果不能客观反映实际</li><li>主要特点<ul><li>各评价指标间作用得到的、线性补偿</li><li>权重系数对评价结果的影响明显</li></ul></li></ul></li><li>非线性加权综合法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%8A%A0%E6%9D%83%E7%BB%BC%E5%90%88%E6%B3%95.png" alt="非线性加权综合法"></li><li>适用条件：各指标间有较强关联性</li><li>主要特点<ul><li>对数据要求较高，指标数值不能为0、负数</li><li>乘除法容易拉开评价档次，对较小数值的变动更敏感</li></ul></li></ul></li><li>逼近理想点法（TOPSIS）</li></ul></li></ul></li></ul><h2 id="模糊综合评价"><a href="#模糊综合评价" class="headerlink" title="模糊综合评价"></a>模糊综合评价</h2><p>对方案、人才、成果的评价，人们考虑的因素很多，而且有些描述很难给出确切的表达，这时采用模糊评价方法，它可对人、事、物进行比较全面又定量化的评价</p><h3 id="模糊概念"><a href="#模糊概念" class="headerlink" title="模糊概念"></a>模糊概念</h3><ul><li>从属于该概念到不属于该概念之间无明显分界线</li></ul><h3 id="模糊子集与隶属函数"><a href="#模糊子集与隶属函数" class="headerlink" title="模糊子集与隶属函数"></a>模糊子集与隶属函数</h3><ul><li>设 U 是论域，称映射</li><li>A(x)：U—&gt;[0,1]</li><li>确定了一个U上的模糊子集 A，映射A(x)称为A的隶属函数，它表示 x 对 A 的隶属程度</li><li>使 A(x) &#x3D; 0.5的点称为 A 的过渡点，此点最具模糊性</li><li>当映射 A(x)只取0或1时，模糊子集 A 就是经典子集，而 A(x) 就是它的特征函数</li><li>经典子集就是模糊子集的特殊情形</li></ul><h3 id="一级模糊综合评价的基本步骤"><a href="#一级模糊综合评价的基本步骤" class="headerlink" title="一级模糊综合评价的基本步骤"></a>一级模糊综合评价的基本步骤</h3><ul><li>确定评价指标集 U &#x3D; {u<del>1</del>，……，u<del>n</del>}</li><li>确定评语集 V &#x3D; {v<del>1</del>，……，v<del>n</del>}</li><li>求出模糊评价矩阵 P（往往根据具体数据）</li><li>其中 P<del>ij</del>表示方案 X 在第 i 个指标处于第 i 级评语的隶属度</li><li>设各指标的权系数向量为 A &#x3D; （w<del>1</del>，……，w<del>n</del>）<ul><li>可以使用层次分析法得到权重</li></ul></li><li>利用矩阵的模糊乘法得到综合模糊评价结果 B &#x3D; AP<ul><li>运算为模糊乘法，逻辑乘∧和逻辑加∨</li><li>逻辑乘∧是两个数取最小值</li><li>逻辑加∨是两个数取最大值</li></ul></li><li>对结果归一化处理</li></ul><h3 id="多级模糊综合评价的基本步骤"><a href="#多级模糊综合评价的基本步骤" class="headerlink" title="多级模糊综合评价的基本步骤"></a>多级模糊综合评价的基本步骤</h3><ul><li>与一级模糊综合评价的基本步骤类似</li><li>评价指标 u<del>n</del> 还能往下细分其元素，且细分的元素间也存在权重（一共有两种权重）</li><li>C &#x3D; AB &#x3D; A(A<del>1</del>R<del>1</del>;……;A<del>n</del>R<del>n</del>) &#x3D; A(B<del>1</del>;……;B<del>n</del>)</li><li>R<del>n</del> 为细分的元素的模糊评价矩阵</li><li>B<del>n</del> 为评价指标 u<del>n</del> 的评价结果，其结果要归一化</li><li>所有评价指标 u<del>n</del> 的评价结果组合成总的模糊评价矩阵</li><li>评价结果 &#x3D; 权重 * 总的模糊评价矩阵</li><li>对结果归一化处理</li></ul><h2 id="灰色系统"><a href="#灰色系统" class="headerlink" title="灰色系统"></a>灰色系统</h2><h3 id="灰色关联分析"><a href="#灰色关联分析" class="headerlink" title="灰色关联分析"></a>灰色关联分析</h3><h3 id="利用灰色关联分析法进行综合评价"><a href="#利用灰色关联分析法进行综合评价" class="headerlink" title="利用灰色关联分析法进行综合评价"></a>利用灰色关联分析法进行综合评价</h3><ul><li>根据评价目的确定评价指标体系，收集评价数据</li><li>确定参考数据列</li><li>对指标数据进行一致性、无量纲化</li><li>计算关联系数</li><li>如果各指标在综合评价中所起的作用不同，可对关联系数求加权平均值<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%85%B3%E8%81%94%E5%BA%A6%E5%8A%A0%E6%9D%83%E5%B9%B3%E5%9D%87%E5%80%BC.png" alt="关联度加权平均值"></li></ul></li><li>依据各观察对象的关联系数，排序得到综合评价结果</li></ul><h1 id="主成分分析及SPSS软件操作"><a href="#主成分分析及SPSS软件操作" class="headerlink" title="主成分分析及SPSS软件操作"></a>主成分分析及SPSS软件操作</h1><p>数据降维有两种典型的算法：主成分分析法、因子分析法</p><p>区别</p><ul><li>主成分的数量和指标的数量是一致的，只不过是前几个主成分比较大，所以就选前几个主成分，从而起到降维的作用</li><li>因子分析是在提前指定因子数量的情况下，你指定几个因子，一定是生成几个因子来代替原先的所有指标</li></ul><h2 id="主成分分析"><a href="#主成分分析" class="headerlink" title="主成分分析"></a>主成分分析</h2><p>考察多个变量间相关性的一种多元统计方法，研究如何通过少数几个主分量来解释多个变量间的内部结构，且主分量彼此间互不相关</p><p>目的：数据压缩、数据解释</p><h3 id="降维过程"><a href="#降维过程" class="headerlink" title="降维过程"></a>降维过程</h3><ul><li>假定只有两个变量，若两个变量间存在相关关系，这意味着两个变量提供的信息有重叠</li><li>如果把两个变量用一个变量来表示，同时这一个新的变量又尽可能包含原来的两个变量的信息，这就是降维</li><li>两个变量可以用椭圆围住，椭圆有两个轴，长轴和短轴，长轴方向数据变化大，方差大，代表信息多，而短轴则相反，故用长轴方向的变量来代表原来两个变量的信息</li><li>高维数据是用高维椭球，每个变量都有一个坐标轴，有几个变量就有几个主轴</li><li>先把主轴都找出来，再用代表大多数据信息的最长几个轴作为新变量，降维就完成了</li><li>找出的新变量是原来的线性组合，叫做主成分</li></ul><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><ul><li>如果将选取的第一个线性组合即第一个综合变量记为 F1，自然希望 F1 尽可能多的反映原来变量的信息，那怎样才能反映呢？</li><li>最经典的方法就是用方差来表达，即 var(F1) 越大，表示 F1 包含的信息越多。因此在所有的线性组合中所选取的 F1 应该是方差最大的，故称之为第一主成分</li><li>如果 F1 不足以代表原来 p 个变量信息，再考虑选取 F2，依此类推</li><li>为了有效地反映原来的信息，F1 已有的信息就不再出现在 F2 中，即 cov(F1,F2) &#x3D; 0，依此类推</li><li>各主成分的累积方差贡献率 &gt; 85% 或主成分的特征根 &gt; 1 就可以提取</li></ul><h3 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h3><ul><li>新的综合变量为原变量的线性组合<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%8F%98%E9%87%8F%E7%9A%84%E7%BA%BF%E6%80%A7%E7%BB%84%E5%90%88.png" alt="变量的线性组合"></li></ul></li><li>数学模型的条件<ul><li>对于任意常数c，有 var(cF<del>i</del>) &#x3D; c^2^var(F<del>i</del>)</li><li>为了使方差 var(F<del>i</del>) 可以比较，要求线性组合的系数满足规范化条件<ul><li>a<del>i1</del>^2^ + a<del>i2</del>^2^ + … + a<del>ip</del>^2^  &#x3D; 1</li></ul></li><li>原始变量之间存在一定的相关性，但各个综合变量间互不相关，即协方差为0</li><li>为了消除变量量纲不同对方差的影响，通常对数据进行标准化处理，变量间的协方差即为相关系数</li><li>如果多个变量相互独立或相关性很小，就不能进行主成分分析<ul><li>两种检验只要满足一个就可以</li><li>KMO检验<ul><li>检验变量之间的偏相关系数是否过小</li><li>0.5以上就代表可以</li><li>0.3 ~ 0.5适合做，但不推荐</li><li>小于0.3就代表不太适合</li></ul></li><li>Bartlett’s 检验<ul><li>小于0.05可以做</li><li>大于0.05不推荐做</li></ul></li></ul></li><li>数学模型的推导<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E4%B8%BB%E6%88%90%E5%88%86%E6%96%B9%E5%B7%AE%E6%8E%A8%E5%AF%BC.png" alt="主成分方差推导"></li><li>通过推导可知，X<del>1</del>，X<del>2</del>，…，X<del>p</del>的主成分就是以协方差阵 ∑ 的特征向量为系数的线性组合，其方差为∑的特征根</li><li>由于 ∑ 特征根 ⋋<del>1</del> &gt;&#x3D; ⋋<del>2</del> &gt;&#x3D; … &gt;&#x3D; ⋋<del>p</del> &gt; 0，所以有 var(F<del>1</del>) &gt;&#x3D; var(F<del>2</del>) &gt;&#x3D; … &gt;&#x3D; var(F<del>p</del>) &gt; 0因此主成分的名次是按特征根取值大小的顺序排列的</li></ul></li><li>主成分的提取</li></ul></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>对原来的 p 个指标进行标准化，以消除变量在水平和量纲上的影响</li><li>根据标准化后的数据矩阵求出相关系数矩阵</li><li>求出协方差矩阵的特征根和特征向量</li><li>确定主成分，并对主成分所包含的信息给予适当的解释</li></ul><h2 id="因子分析法"><a href="#因子分析法" class="headerlink" title="因子分析法"></a>因子分析法</h2><ul><li>ZX 为标准化后的数据</li><li>ZX<del>p</del> &#x3D; a<del>11</del>f<del>1</del> + a<del>12</del>f<del>2</del> + … + a<del>1m</del>f<del>m</del> + ε<del>p</del></li><li>f<del>m</del> 为公因子，ε<del>p</del> 为特殊因子</li></ul><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>用于空间规划和时间规划问题</p><p>求路径最短，求总时间最小</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>图 G 是指一个二元组(V(G),E(G))</p><ul><li>V(G) 为顶点集</li><li>E(G) 为边集</li></ul></li><li><p>图 G 的阶是指图的顶点数</p></li><li><p>若一个图的顶点集和边集都是有限集，则称其为有限图</p></li><li><p>只有一个顶点的图称为平凡图</p></li><li><p>有向图、无向图，既有无向边又有有向边的图称为混合图</p></li><li><p>既没有环又没有重边的图称为简单图，任意两顶点都相邻的简单图称为完全图，记为K</p></li><li><p>若 V(G) &#x3D; X ∪ Y， X ∩ Y &#x3D; Ø，且 X 中任意两顶点不相邻，Y 中任意两顶点不相邻，则称为二部图</p><ul><li>若 X 中每一项顶点皆与 Y 中一切顶点相邻，称为完全二部图，记为K<del>m,n</del>(m&#x3D;|X|,n&#x3D;|Y|)</li><li>m 为1，n 不为1，则图 K<del>1,n</del> 叫做星</li></ul></li><li><p>若图 G 的每一条边 e 都赋以一个实数 w(e)，称 w(e) 为边 e 的权，G 连同边上的权称为赋权图</p></li><li><p>子图</p><ul><li>设 G &#x3D;(V,E) 和 G^‘^ &#x3D; (V^‘^,E^‘^) 是两个图</li><li>若 V^‘^ ⊆ V，E^‘^ ⊆ E，称 G^‘^ 是 G 的一个子图，记 G^‘^ ⊆ G</li><li>若 V^‘^ &#x3D; V，E^‘^ ⊆ E，则称 G^‘^ 是 G 的一个生成子图</li><li>若 V^‘^ ⊆ V，V^‘^ ≠ ∅，以 V^‘^ 为顶点集，以两端点均在 V^‘^ 中的边的全体为边集的图 G 的子图，称为 G 的由 V^‘^ 导出的子图，记为 G[V^‘^]</li><li>若 E^‘^ ⊆ E，E^‘^ ≠ ∅，以 E^‘^ 为边集，以 E^‘^ 的端点集为顶点集的图 G 的子图，称为 G 的由 E^‘^ 导出的边导出的子图，记为 G[E^‘^]</li></ul></li><li><p>图的矩阵表示</p><ul><li>邻接矩阵 <ul><li>无向图</li><li>有向图</li><li>有向赋权图</li></ul></li><li>关联矩阵<ul><li>无向图</li><li>有向图</li></ul></li></ul></li><li><p>图的顶点度</p><ul><li>在无向图 G 中，与顶点 v 关联的边的数目（环算两次），称为顶点 v 的度或次数，记为 d(v) 或 d<del>G</del>(v)<ul><li>奇点</li><li>偶点</li></ul></li><li>出度 d^+^(v)</li><li>入度 d^-^(v)</li><li>d(v) &#x3D; d^+^(v) + d^-^(v)</li><li>任何图中奇点的个数为偶数</li></ul></li><li><p>路和连通</p><ul><li>途径 W，W 的长为整数 K，起点、终点，内部顶点</li><li>若途径 W 的边互不相同但顶点可重复，则称 W 为迹或简单链</li><li>若途径 W 的顶点和边均互不相同，则称 W 为路或路径</li><li>途径 W 中由相继项构成子序列称为途径 W 的节</li><li>起点与终点重合的途径称为闭途径</li><li>起点与终点重合的路称为圈（回路），长为 k 的圈称为 k 阶圈，记为 C<del>k</del></li><li>若在图 G 中存在(u,v) 路，则称顶点 u 和 v 在图 G 中连通</li><li>若在图 G 中顶点 u 和 v 是连通的，则顶点 u 和 v 之间的距离 d(u,v)是指图 G 中最短(u,v)路的长；若没有路连接 u 和 v，则定义为无穷大</li><li>图 G 中任意连点皆连通的图称为连通图</li><li>对于有向图 G，W为有向途径</li><li>有向迹、有向路、有向圈</li></ul></li></ul><h2 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h2><ul><li>方法：Dijkstra和Floyd算法<ul><li>Dijkstra<ul><li>求赋权图中从给定点到其余顶点的最短路</li></ul></li><li>Floyd<ul><li>求赋权图中任意两点间的最短路</li></ul></li></ul></li></ul><h1 id="BP神经网络"><a href="#BP神经网络" class="headerlink" title="BP神经网络"></a>BP神经网络</h1><ul><li>对于手头的数据不确定是符合哪种函数，且研究输入和输出的关系，可以使用神经网络（评价、预测、分类）</li><li>神经网络适合大样本，但深度学习就不一定了，因为不同的模型要求不一样</li></ul><h2 id="数学近似映射（函数逼近）"><a href="#数学近似映射（函数逼近）" class="headerlink" title="数学近似映射（函数逼近）"></a>数学近似映射（函数逼近）</h2><ul><li>拟合<ul><li>预测</li></ul></li><li>分类<ul><li>聚类分析</li></ul></li></ul><h2 id="建立步骤"><a href="#建立步骤" class="headerlink" title="建立步骤"></a>建立步骤</h2><ul><li>网络结构的确定</li><li>权值和阈值的确定</li><li>工作阶段</li></ul><h2 id="神经元模型"><a href="#神经元模型" class="headerlink" title="神经元模型"></a>神经元模型</h2><ul><li>输入与输出<ul><li>净激活量<ul><li>net<del>i</del> &#x3D; ∑<del>j&#x3D;1</del>^n^ w<del>ij</del>x<del>j</del> - θ &#x3D; ∑<del>j&#x3D;0</del>^n^ w<del>ij</del>x<del>j</del></li></ul></li><li>激活函数<ul><li>y<del>i</del> &#x3D; ⨍(net<del>i</del>)</li></ul></li><li>X &#x3D; [x<del>0</del>, , , ,x<del>n</del>]，W &#x3D; [w<del>i0</del> , , , , w<del>in</del>]^T^</li><li>net<del>i</del> &#x3D; XW，y<del>i</del> &#x3D; ⨍(XW)</li></ul></li><li>激活函数<ul><li>线性函数<ul><li>⨍(x) &#x3D; k*x + c</li></ul></li><li>S形函数<ul><li>⨍(x) &#x3D; 1 &#x2F; (1 + e^-ɑx^)</li></ul></li><li>阈值函数<ul><li>x &gt; c<ul><li>⨍(x) &#x3D; T</li></ul></li><li>|x| &lt;&#x3D; c<ul><li>⨍(x) &#x3D; k*x</li></ul></li><li>x &lt; -c<ul><li>⨍(x) &#x3D; -T</li></ul></li></ul></li><li>双极S形函数<ul><li>⨍(x) &#x3D; 2 &#x2F; (1 + e^-ɑx^) - 1</li></ul></li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%构建2层的神经网络</span></span><br><span class="line"><span class="comment">%预测销量可以将前3个月的销量作为输入，下一个月销量的预测作为输出</span></span><br><span class="line"><span class="comment">%输入数据可以做归一化处理</span></span><br><span class="line">P=[<span class="number">-1</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">2</span>;<span class="number">0</span> <span class="number">5</span> <span class="number">0</span> <span class="number">5</span>];<span class="comment">%输入数据 维度为m*n m为特征数 n为样本量</span></span><br><span class="line">t=[<span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">1</span>];<span class="comment">%理想输出 维度为c*z c为预测种类的数目 z=n为样本量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%老版newff用法</span></span><br><span class="line">PR=minmax(P);<span class="comment">%输入数据的最小、最大值</span></span><br><span class="line">net=newff(PR,[<span class="number">3</span> <span class="number">1</span>],&#123;<span class="string">&#x27;tansig&#x27;</span>,<span class="string">&#x27;purelin&#x27;</span>&#125;,<span class="string">&#x27;traingd&#x27;</span>);</span><br><span class="line"><span class="comment">%第一层用tansig函数，第二层用purelin函数，学习规则为traingd</span></span><br><span class="line"><span class="comment">%2*m-2=6 所以S1为5或6都可以（一种计算神经元的方法）</span></span><br><span class="line"><span class="comment">%隐藏层和输出层分别有3个和1个神经元</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%新版newff用法</span></span><br><span class="line">net=newff(P,t,[<span class="number">3</span>],&#123;<span class="string">&#x27;tansig&#x27;</span>,<span class="string">&#x27;purelin&#x27;</span>&#125;,<span class="string">&#x27;traingd&#x27;</span>);</span><br><span class="line">net.divideFcn = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">net.trainParam.show=<span class="number">50</span>;<span class="comment">%每次循环50次</span></span><br><span class="line">net.trainParam.epochs=<span class="number">500</span>;<span class="comment">%最大循环500次</span></span><br><span class="line">net.trainParam.goal=<span class="number">0.01</span>;<span class="comment">%期望目标误差最小值</span></span><br><span class="line">net.trainParam.lr = <span class="number">0.01</span>;</span><br><span class="line">[net,tr]=train(net,P,t);<span class="comment">%对网络进行反复训练</span></span><br><span class="line"></span><br><span class="line">Y=sim(net,P)<span class="comment">%预测</span></span><br><span class="line"><span class="built_in">plot</span>(P,t,P,Y,<span class="string">&#x27;o&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="元胞自动机-CA"><a href="#元胞自动机-CA" class="headerlink" title="元胞自动机 CA"></a>元胞自动机 CA</h1><p>应用：森林火灾、生命游戏、交通流等</p><h2 id="什么是元胞自动机"><a href="#什么是元胞自动机" class="headerlink" title="什么是元胞自动机"></a>什么是元胞自动机</h2><ul><li><p>是一种时空离散的局部动力模型，是研究复杂系统的一种典型方法，特别适合用于空间复杂系统系统的时空动态模拟研究</p><ul><li>复杂系统又称为非线性系统</li></ul></li><li><p>元胞自动机不是由严格定义的物理方程或函数确定，而是用一系列模型构造的规则构成。凡是满足这些规则的模型都可以算作元胞自动机模型。因此，元胞自动机是一类模型的总称，或者说是一个方法框架</p></li><li><p>在CA模型中，散布在规则格网（Lattice Grid）中的每一元胞（Cell）取有限的离散状态，遵循同样的作用规则，依据确定的局部规则作同步更新。大量元胞通过简单的相互作用而构成动态系统的演化</p></li><li><p>CA模型的特点</p><ul><li>时间、空间、状态都离散，每个变量只取有限多个状态，且其状态改变的规则在时间和空间上都是局部的</li></ul></li></ul><h2 id="元胞自动机的构成"><a href="#元胞自动机的构成" class="headerlink" title="元胞自动机的构成"></a>元胞自动机的构成</h2><ul><li>基本组成<ul><li>元胞、元胞空间、邻居、规则（四部分）</li><li>简单讲，元胞自动机可以视为一个元胞空间和定义于该空间的变换函数所组成</li></ul></li><li>元胞<ul><li>元胞自动机的最基本组成部分</li><li>分布在离散的一维、二维或多维欧几里得空间的晶格点上</li></ul></li><li>状态<ul><li>可以是{0,1}的二进制形式，或是{S<del>0</del>,S<del>2</del>,…,S<del>j</del>}整数形式的离散集</li><li>严格意义上，元胞只能有一个状态变量，但在实际应用中，往往将其进行扩展</li></ul></li><li>元胞空间<ul><li>元胞所分布在的空间网点集合就是元胞空间</li><li>元胞空间通常可按三角形、四边形或六边形三种网格排列<ul><li>三角网格<ul><li>拥有较少的邻居数目，这在某些时候很有用</li><li>缺点是计算机的表达与显示不方便</li></ul></li><li>四边形网格<ul><li>直观简单，特别适合于计算机环境下进行表达显示</li></ul></li><li>六边形网格<ul><li>能较好的模拟各向同性的现象，因此，模型能更加自然而真实</li><li>缺点同正三角网格一样，在表达显示上较为困难和复杂</li></ul></li></ul></li><li>边界条件<ul><li>理论上，元胞空间在各个维向上是无限延展的</li><li>实际应用过程中，无法再计算机上实现这一理想条件</li></ul></li><li>构形<ul><li>在某个时刻，在元胞空间上所有元胞状态的空间分布组合</li><li>在数学上，它通常可以表示为一个多维的整数矩阵</li></ul></li><li>演化规则<ul><li>邻居、元胞和元胞空间只表示了系统的静态成分，为了将动态引入系统，必须加入演化规则</li><li>这些规则是定义在局部空间范围内的，即一个元胞下一时刻的状态决定于本身的状态和它的邻居元胞的状态</li><li>因此，在指定规则之前，必须定义一定的邻居规则，明确哪些元胞属于该元胞的邻居<ul><li>一维元胞自动机<ul><li>通常以半径 r 来确定邻居，距离一个元胞 r 内的所有元胞都属于该元胞的邻居</li></ul></li><li>二维元胞自动机<ul><li>邻居定义较为复杂，通常有以下几种<ul><li>Von.Neumann 型<ul><li>周围四个</li></ul></li><li>Moore 型<ul><li>周围8个</li></ul></li><li>扩展 Moore 型<ul><li>周围24个</li></ul></li></ul></li><li>若思考的问题比较简单，可以用 Von.Neumann 型</li><li>若思考的问题比较复杂，所要思考的内容也比较多，可以用扩展 Moore 型</li><li>其次可以用 Moore 型</li></ul></li></ul></li></ul></li></ul></li><li>规则<ul><li>根据元胞当前状态及其邻居状况确定下一时刻该元胞状态的动力学函数<ul><li>简单讲，就是状态转移函数</li><li>f：S<del>t</del>^t+1^ &#x3D; f(S<del>i</del>^t^,……,S^t^<del>N</del>)<ul><li>S^t^<del>N</del>为 t 时刻的邻居状态组合</li></ul></li></ul></li></ul></li><li>时间<ul><li>元胞自动机是一个动态系统，它在时间维上的变化是离散的，即时间 t 是一个整数值，而且连续且等间距<ul><li>在上述转换函数中，一个元胞在 t+1 时刻的状态只直接决定于 t 时刻的该元胞及其邻居的状态</li></ul></li></ul></li><li>元胞自动机特性<ul><li>离散性<ul><li>元胞自动机是高度离散的</li><li>它不仅仅空间离散、时间离散，而且在函数值，即元胞的状态值也是离散的</li></ul></li><li>动力学演化的同步性<ul><li>元胞自动机具有利用简单的、局部规则的和离散的方法，描述复杂的、 全部的和连续系统的能力</li><li>就是一个元胞改变，它周围受它影响的元胞也和它同时改变</li></ul></li><li>相互作用的局部性<ul><li>元胞自动机的规则是局部的，而动力学行为规则是全局的，在模拟过程中，具体的演化过程也是局部的，即仅同周围的元胞有关系</li><li>就是说规则只会对单个元胞起作用，但元胞的改变会影响全局</li></ul></li></ul></li></ul><h2 id="初等元胞自动机"><a href="#初等元胞自动机" class="headerlink" title="初等元胞自动机"></a>初等元胞自动机</h2><p>状态个数 k &#x3D; 2，邻居半径 r &#x3D; 1的一维元胞自动机</p><p>由于只有两种状态，所以函数 f 共有2^8^&#x3D;256种状态</p><h2 id="二维元胞自动机"><a href="#二维元胞自动机" class="headerlink" title="二维元胞自动机"></a>二维元胞自动机</h2><p>Conway和生命游戏</p><h2 id="元胞自动机的沿海行为的统计特征"><a href="#元胞自动机的沿海行为的统计特征" class="headerlink" title="元胞自动机的沿海行为的统计特征"></a>元胞自动机的沿海行为的统计特征</h2><ul><li>平稳型<ul><li>经过一段时间的演化后，经过若干步运算便停留在一个固定的状态</li></ul></li><li>周期型<ul><li>经过一段时间的演化后，在几种状态之间周期循环</li></ul></li><li>混沌型<ul><li>经过一段时间的演化后，处于一种完全无序随机的状态，几乎找不到任何规律</li></ul></li><li>复杂型<ul><li>在演化过程中可能产生复杂的结构，这种结构即不是完全的随机混乱，又没有固定的周期和状态</li></ul></li><li>随元胞的复杂度逐渐升高<ul><li>平稳 —&gt; 周期 —&gt; 复杂 —&gt; 混沌</li></ul></li></ul><h2 id="NS-模型"><a href="#NS-模型" class="headerlink" title="NS 模型"></a>NS 模型</h2><p>在184号规则的基础上，提出了一维交通流 CA 模型，即 NS 模型</p><h1 id="马尔可夫预测"><a href="#马尔可夫预测" class="headerlink" title="马尔可夫预测"></a>马尔可夫预测</h1><h2 id="随机过程"><a href="#随机过程" class="headerlink" title="随机过程"></a>随机过程</h2><ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B.png" alt="随机过程"></li><li>T 为参数集合，参数 t 可以看作时间</li><li>δ 的每一个可能取值所构成的集合称为状态空间，记为 E</li><li>当参数 T 为非负整数集时，随机过程又称为随机序列，马尔可夫链就是一类特殊的随机序列</li><li>在随机过程中存在一种现象<ul><li>某一系统在已知现在的情况下，系统未来时刻的情况只与现在有关，而与过去的历史无直接关系<ul><li>已知现在，且与过去无关（后无效性）</li><li>描述这一类随机现象的数学模型称为马尔可夫模型</li></ul></li></ul></li></ul><h2 id="马尔可夫链"><a href="#马尔可夫链" class="headerlink" title="马尔可夫链"></a>马尔可夫链</h2><ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE.png" alt="马尔可夫链"></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE%E8%AF%81%E6%98%8E.png" alt="马尔可夫链证明"></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%97%B6%E9%BD%90%E6%80%A7.png" alt="时齐性"></li></ul><h2 id="概率转移矩阵"><a href="#概率转移矩阵" class="headerlink" title="概率转移矩阵"></a>概率转移矩阵</h2><ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%A6%82%E7%8E%87%E8%BD%AC%E7%A7%BB%E7%9F%A9%E9%98%B5.png" alt="概率转移矩阵"></li></ul><h2 id="一步转移矩阵性质"><a href="#一步转移矩阵性质" class="headerlink" title="一步转移矩阵性质"></a>一步转移矩阵性质</h2><ul><li>对一切 i，j ∈ E，0 &lt;&#x3D; p<del>ij</del>(m) &lt;&#x3D; 1</li><li>对一切 i ∈ E，∑<del>j∈E</del>p<del>ij</del>(m) &#x3D; 1</li><li>对一切 i，j ∈ E，p<del>ij</del>(0) &#x3D; δ<del>ij</del> &#x3D; 1（当 i &#x3D; j 时）或 0（当 i ≠ j 时）</li><li>当实际问题可以用马氏链来描述时，首先要确定它的状态空间及参数集合，然后确定它的一步转移概率</li></ul><h2 id="柯尔莫哥洛夫—开普曼定理"><a href="#柯尔莫哥洛夫—开普曼定理" class="headerlink" title="柯尔莫哥洛夫—开普曼定理"></a>柯尔莫哥洛夫—开普曼定理</h2><ul><li>p<del>ij</del> (n + m) &#x3D; ∑<del>k∈E</del> p<del>ik</del>(n)P<del>kj</del>(m)，其中 i，j ∈ E</li></ul><h2 id="P-0-P-0-P-n"><a href="#P-0-P-0-P-n" class="headerlink" title="P^(0)^ &#x3D; P^(0)^P^(n)^"></a>P^(0)^ &#x3D; P^(0)^P^(n)^</h2><ul><li>P 是一步马尔可夫链转移矩阵（P 的行向量是概率向量）</li><li>P^(0)^ 是初始分布行向量，第 n 步的分布概率为P^(0)^ &#x3D; P^(0)^P^(n)</li></ul><h2 id="转移概率的极限分布"><a href="#转移概率的极限分布" class="headerlink" title="转移概率的极限分布"></a>转移概率的极限分布</h2><ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E8%BD%AC%E7%A7%BB%E6%A6%82%E7%8E%87%E7%9A%84%E6%9E%81%E9%99%90%E5%88%86%E5%B8%83.png" alt="转移概率的极限分布"></li></ul><h2 id="马氏链的两个重要类型"><a href="#马氏链的两个重要类型" class="headerlink" title="马氏链的两个重要类型"></a>马氏链的两个重要类型</h2><ul><li>正则链<ul><li>从任一状态出发经有限次转移能以正概率到达另外任一状态</li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%AD%A3%E5%88%99%E9%93%BE.png" alt="正则链"></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E8%8B%A5%E5%B9%B2%E4%BB%A5%E5%90%8E%E7%9A%84%E6%A6%82%E7%8E%87.png" alt="若干以后的概率"></li></ul></li><li>吸收链<ul><li>一但到达就不会离开的状态</li></ul></li></ul><h2 id="泊松分布"><a href="#泊松分布" class="headerlink" title="泊松分布"></a>泊松分布</h2><h2 id="吸收态相关计算"><a href="#吸收态相关计算" class="headerlink" title="吸收态相关计算"></a>吸收态相关计算</h2><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%90%B8%E6%94%B6%E6%80%81%E7%9B%B8%E5%85%B3%E8%AE%A1%E7%AE%97.png" alt="吸收态相关计算"></p><h1 id="最优化算法"><a href="#最优化算法" class="headerlink" title="最优化算法"></a>最优化算法</h1><ul><li>经典方法<ul><li>线性规划</li><li>非线性规划</li><li>整数规划</li><li>动态规划</li><li>等等</li></ul></li><li>现代方法<ul><li>随机规划</li><li>模糊规划</li><li>模拟退火算法</li><li>遗传算法</li><li>禁忌搜索</li><li>人工神经网络</li><li>等等</li></ul></li><li>智能优化算法（现代启发式算法）<ul><li>是一种具有全局优化性能、通用性强且适合于并行处理的算法</li><li>理论上可以在一定时间内找到最优解或近似最优解</li><li>常用的智能优化算法<ul><li>遗传算法</li><li>模拟退火算法</li><li>禁忌搜索算法</li><li>粒子群算法</li><li>蚁群算法</li></ul></li></ul></li></ul><h1 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一种仿生全局优化算法，模拟生物在自然环境中遗传和进化的自适应（对遗传参数的自适应调整），是应用最广泛和效果最显著的智能优化算法</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>函数优化<ul><li>经典应用</li></ul></li><li>组合优化<ul><li>旅行商问题</li><li>背包问题</li><li>装箱问题</li></ul></li><li>生产调度问题</li><li>自动控制<ul><li>航空控制系统的优化设计</li><li>模糊控制器优化设计和在线修改隶属度函数</li></ul></li><li>机器人智能控制</li><li>图像处理和模糊识别</li><li>机器学习</li></ul><h2 id="标准遗传算法的基本流程"><a href="#标准遗传算法的基本流程" class="headerlink" title="标准遗传算法的基本流程"></a>标准遗传算法的基本流程</h2><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%A0%87%E5%87%86%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="标准遗传算法的基本流程"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>个体<ul><li>称 S &#x3D; {0,1}^l^ 为个体空间（用01编码）</li><li>个体空间的元素 a&#x3D;a<del>0</del>a<del>1</del>…a<del>l-1</del> ∈ S 称为个体，它是染色体带有特征的实体</li><li>分量 a<del>j</del> ∈ {0,1} 称为基因</li><li>正整数 l 称为个体的基因长度</li></ul></li><li>种群<ul><li>称个体空间 S 中 N 各个体组成的一个子集（个体允许重复）称为一个种群</li><li>记为 A &#x3D; (A<del>1</del>,A<del>2</del>,…,A<del>N</del>)</li><li>其中 A<del>j</del>(j &#x3D; 1,2,…,N)</li><li>N 称为种群规模</li></ul></li><li>适应度<ul><li>对生存环境适应程度较高的物种将获得更多的繁殖机会，而对生存环境适应程度较低的物种，其繁殖机会就会相对较少，甚至逐渐灭绝</li><li>在算法中，一般通过适应度函数来衡量某一个体的适应度高低</li></ul></li><li>编码<ul><li>将一个待求解的问题的事迹可行解从其解空间转换到遗传算法所能处理的搜索空间（即个体空间）的过程</li><li>就像上述我们用01编码，也就是一个数值用01来进行编码，把十进制转换为二进制的过程称为编码</li></ul></li><li>解码<ul><li>编码的逆过程</li></ul></li><li>选择操作<ul><li>根据个体的适应度，按照一定规则，从第 t 代群体 P(t) 中选择一些优良的个体遗传到下一代群体 P(t+1) 中</li><li>一般选择操作通过选择算子进行</li><li>就是按照一定规则（复制哪段），从父辈的基因中选择一段复制到子辈的基因里</li></ul></li><li>交叉操作<ul><li>将群体 P(t) 内的各个个体随机搭配成对，对每一对个体，以某种概率（交叉概率）遵循某一种规则交换它们之间的部分染色体</li><li>不是非得每一次进行交叉操作，而是达到概率才进行</li><li>我们可以规定交换哪里、多少</li></ul></li><li>变异操作<ul><li>对群体 P(t) 中的每一个个体，以某一概率（变异概率）改变某一个或某一些基因座上的基因值为其他的等位基因</li><li>就像上述我们用01编码，变异操作就是某一为或几位上的0变成1，1变成0</li></ul></li></ul><h2 id="应用步骤"><a href="#应用步骤" class="headerlink" title="应用步骤"></a>应用步骤</h2><ul><li>确定决策变量及各种约束条件</li><li>建立优化模型，确定目标函数的类型及其数学描述形式或量化方法</li><li>确定表示可行解的染色体编码方法<ul><li>是遗传算法解决问题的先决条件和关键步骤<ul><li>决定个体基因的排列形式<ul><li>决定选择与繁殖等操作的作用方式</li></ul></li><li>决定从搜索空间的检验型到解空间的表现型的解码方式<ul><li>决定对 GA 所获解的翻译与理解</li></ul></li><li>决定 GA 搜索的困难度与复杂性</li><li>决定对问题的求解精度<ul><li>通过要达到小数点后几位的精度可以反过来求编码的长度</li></ul></li></ul></li><li>常见的方法<ul><li>二进制编码<ul><li>搜索能力强</li></ul></li><li>浮点数编码<ul><li>能够保持更好的种群多样性</li></ul></li></ul></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E7%BC%96%E7%A0%81.png" alt="编码"></li></ul></li><li>确定解码方法<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E8%A7%A3%E7%A0%81.png" alt="解码"></li></ul></li><li>定义适应度函数<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%80%82%E5%BA%94%E5%BA%A6%E5%87%BD%E6%95%B01.png" alt="适应度函数1"></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%80%82%E5%BA%94%E5%BA%A6%E5%87%BD%E6%95%B02.png" alt="适应度函数2"></li><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%80%82%E5%BA%94%E5%BA%A6%E5%87%BD%E6%95%B03.png" alt="适应度函数3"></li></ul></li><li>确定各遗传具体操作方法<ul><li>选择算子<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E4%B8%AA%E4%BD%93%E9%80%89%E6%8B%A9%E6%A6%82%E7%8E%87.png" alt="个体选择概率"></li></ul></li><li>选择操作<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95.png" alt="选择算法"></li></ul></li><li>交叉<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E4%BA%A4%E5%8F%89.png" alt="交叉"></li></ul></li><li>变异<ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E5%8F%98%E5%BC%82.png" alt="变异"></li></ul></li></ul></li><li>确定遗传算法的有关运行参数，包括群体规模、迭代次数（一般取值为100~500）、选择算子、交叉率、变异率等等<br>* <ul><li><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E7%BE%A4%E4%BD%93%E8%A7%84%E6%A8%A1.png" alt="群体规模"></li></ul></li><li>初始化群体<ul><li>初始群体一般随机产生</li><li>初始值最好能在解空间中采样均匀（收敛速度较快）</li><li>对于非二进制编码，还要考虑所生成的染色体是否在可行区域内（要验证）</li></ul></li><li>计算群体中的个体或染色体解码后的适应值</li><li>按照遗传策略，运用选择、交叉、变异算子作用于群体，形成下一代</li><li>判断群体性能是否满足某一指标，或已完成预定的迭代次数<ul><li>不满足则返回第9步，或者修改遗传策略再返回第8步</li></ul></li></ul><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="流程图"></p><h2 id="未成熟收敛问题"><a href="#未成熟收敛问题" class="headerlink" title="未成熟收敛问题"></a>未成熟收敛问题</h2><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E6%9C%AA%E6%88%90%E7%86%9F%E6%94%B6%E6%95%9B%E9%97%AE%E9%A2%98.png" alt="未成熟收敛问题"></p><p>使用随机数</p><p>随机数后的基因交叉或变异</p><p>如果生成子代评价值&lt;0，那么就重新生成，如果怎么交叉（在长度内所有数字都遍历完了）都小于0，那么子代直接就是父亲的复制</p><p>如果变异后的个体评价没有原来个体好，那么返回的还是原个体的二进制编码</p><p>按照传统的仅仅使用选择、交叉和变异三个操作是不能收敛到全局最优解</p><p>而采用精英保留策略的遗传算法是全局收敛的</p><p>采用基因遗传算法能确保适应度最高的个体（精英个体）能够直接传递到下一代，从而保持种群的优秀基因不被破坏</p><p>核心思想是在每一代中选择适应度最高的个体直接保留到下一代，代替种群中最差的个体</p><p>或者将适应度最高的前n个个体代替下一代中最差的n个个体（通常n要远远小于群体规模m）</p><p>这种策略有助于提高算法的全局收敛能力，确保在进化过程中不会丢失迄今为止搜索到的最优解</p><h2 id="有序交叉"><a href="#有序交叉" class="headerlink" title="有序交叉"></a>有序交叉</h2><p>能够有效地继承双亲的部分基因成分，达到进化的遗传功能，使该遗传算法并不盲目搜索，二是趋向于使种群具有更多的优良基因</p><h2 id="倒置变异法"><a href="#倒置变异法" class="headerlink" title="倒置变异法"></a>倒置变异法</h2><h2 id="BP与GA结合"><a href="#BP与GA结合" class="headerlink" title="BP与GA结合"></a>BP与GA结合</h2><p>GA擅长全局优化搜索，BP擅长局部优化搜索</p><p>两者结合，可提高收敛速度，客服GA过早收敛的问题</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/GA%E5%92%8CBP%E7%BB%93%E5%90%881.png" alt="GA和BP结合1"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/GA%E5%92%8CBP%E7%BB%93%E5%90%882.png" alt="GA和BP结合2"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%901.png" alt="遗传算法例子1"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%902.png" alt="遗传算法例子2"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%903.png" alt="遗传算法例子3"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%904.png" alt="遗传算法例子4"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%905.png" alt="遗传算法例子5"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%906.png" alt="遗传算法例子6"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%907.png" alt="遗传算法例子7"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%908.png" alt="遗传算法例子8"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%909.png" alt="遗传算法例子9"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%9010.png" alt="遗传算法例子10"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%9011.png" alt="遗传算法例子11"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%9012.png" alt="遗传算法例子12"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%9013.png" alt="遗传算法例子13"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%9014.png" alt="遗传算法例子14"></p><p><img src="/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0.assets/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%9015.png" alt="遗传算法例子15"></p><h1 id="碎纸片拼接复原"><a href="#碎纸片拼接复原" class="headerlink" title="碎纸片拼接复原"></a>碎纸片拼接复原</h1><h2 id="数据预处理-1"><a href="#数据预处理-1" class="headerlink" title="数据预处理"></a>数据预处理</h2><ul><li>附件所给的碎纸片全都是 bmp 格式的黑白图像文件<ul><li>了解位深度、页面规格</li></ul></li><li>灰度矩阵<ul><li>bmp 图像保存的是该图像的灰度矩阵</li><li>Matlab 读取 bmp 文件用 imread 函数<ul><li>A &#x3D; imread(filename)</li></ul></li><li>Matlab 将灰度矩阵保存为相应的 bmp 图像文件用 imwrite 函数<ul><li>imwrite(A, filename)</li></ul></li></ul></li><li>边缘<ul><li>矩形拼图的玩法通常是先找出四个角，然后拼出四边，从四边逐渐往中间拼</li><li>因为页面四边都有规则的空白，所以很容易找出位于四边的碎纸片</li></ul></li><li>印刷体组成<ul><li>字体的主要部分<ul><li>纯黑、但有锯齿状</li><li>像素灰度为0</li></ul></li><li>渲染部分<ul><li>在锯齿状边缘，产生从纯黑到纯白的渐变效果</li><li>像素灰度 &gt; 0，&lt; 255</li></ul></li></ul></li><li>二值化<ul><li>在灰度矩阵中保留全部的 0 元素，将所有非零元素都修改为 255</li><li>拼接不需要二值化<ul><li>拼接复原，判断两个碎纸片是否相邻，无论横切还是纵切，看相邻的灰度值是否相近</li><li>直接利用灰度矩阵即可</li></ul></li><li>聚类成行<ul><li>既纵切又横切，甚至双面，碎片数量甚多，逐片拼接效率太低</li><li>属于同一纵列的碎纸片几乎没有共同特征，而属于同一横行的碎纸片缺具有共同特征——字行的位置一致</li><li>先根据字行的位置是否一致将属于同一横行的碎纸片找出来</li><li>然后在同属一行的哪些碎片当中，设法排好顺序</li><li>无论中英文，字行的位置都可以用“基线”的位置来表示，但基线在字体主要部分（纯黑）</li><li>所以需要对灰度矩阵做二值化处理</li></ul></li></ul></li></ul><h2 id="建模与求解"><a href="#建模与求解" class="headerlink" title="建模与求解"></a>建模与求解</h2><ul><li>纵切或横切<ul><li>问题分析<ul><li>碎纸片间的距离<ul><li>拼接复原，需要判断两个碎纸片是否左右相邻<ul><li>黑的对黑的，白的对白的，渐变的对渐变的</li></ul></li><li>但定义合适的“匹配度”相当困难，可以退一步采用向量距离来判断<ul><li>取出左碎纸片的灰度矩阵的最右一列和右碎纸片的灰度矩阵的最左一列计算距离</li></ul></li><li>找同一行的碎片可以采用聚类分析<ul><li>聚类是建立在距离的基础上</li></ul></li></ul></li><li>贪心搜索算法<ul><li>假设距离最短相邻</li><li>先找出最左边的碎片，然后用贪心搜索算法，从左往右，逐个确定相邻的顺序</li><li>可以尝试从不同方向搜索</li></ul></li></ul></li><li>读取灰度矩阵（使用元胞数组）</li><li>找最左边的碎纸片<ul><li>可以假设最左边的碎纸片至少矩阵有10列空白</li></ul></li><li>贪心搜索<ul><li>可以使用每种距离计算一下，看看差距是否较大，原因</li></ul></li><li>拼接结果</li></ul></li><li>既纵切又横切<ul><li>问题分析<ul><li>直接使用上述方法是不可行的<ul><li>因为碎片的边缘（无论上、下、左、右）都比较短，信息量较少，数量多，错误率高</li><li>但找边角的相对容易，例如左上角，它的左边和上边的空白很多</li></ul></li><li>属于同一横行的碎纸片相对容易</li><li>所以<ul><li>先找到同一横行的碎纸片<ul><li>比较基线的位置距离<ul><li>在碎纸片中，基线至少1条，至多3条（不足3条的，可以补足3条）</li><li>可以采用描述性统计找到基线的位置</li><li>每个碎纸片都对应着一个三维向量，向量的元素就是三条基线在灰度矩阵的行指标，都大于0</li><li>为了准确找到基线位置，先要进行二值化处理</li></ul></li><li>采用聚类算法<ul><li>系统聚类分析<ul><li>单连接聚类</li><li>全连接聚类</li><li>质心连接聚类</li><li>沃德（Ward）方法<ul><li>该问题推荐使用</li><li>沃德方法倾向于产生“等规模”聚类，即每一类包含的对象的数目尽量接近</li></ul></li></ul></li><li>k-means</li></ul></li></ul></li></ul></li></ul></li><li>寻找基线<ul><li>根据统计得到字行宽度的距离<ul><li>两条基线的距离</li></ul></li><li>提取基线位置</li><li>中文与英文的寻找方法不同<ul><li>英文可以根据纯黑点的数目、差分最大的两个位置当中处于下方的那个位置来确定其中一条基线</li></ul></li><li>生成加基线的碎纸片图像</li><li>人工干预</li><li>统计分析</li></ul></li><li>聚类</li><li>再确定最左边的碎片</li><li>然后贪心搜索<ul><li>行内</li><li>行间<ul><li>上下行间空白太多了，不好拼</li></ul></li></ul></li><li>基于基线位置的页面复原<ul><li>根据上述统计得知字行间的距离（假设间隔像素为68）</li><li>定义“匹配度”（距离）</li><li>根据字行间的距离来排列</li></ul></li></ul></li><li>既纵切又横切，甚至双面<ul><li>聚类是采用六维向量<ul><li>由每个碎纸片的两面的三条基线位置合并组成，并且按升序重排</li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown + Typora 笔记速记</title>
      <link href="/2024/08/04/Markdown%20+%20Typora%20%E7%AC%94%E8%AE%B0%E9%80%9F%E8%AE%B0/"/>
      <url>/2024/08/04/Markdown%20+%20Typora%20%E7%AC%94%E8%AE%B0%E9%80%9F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、标题-（-空格-CTRL-0-6-CTRL-加号-减号）"><a href="#一、标题-（-空格-CTRL-0-6-CTRL-加号-减号）" class="headerlink" title="一、标题 （# + 空格 &#x2F; CTRL + 0 ~6 &#x2F; CTRL + 加号/减号）"></a>一、标题 （<code>#</code> +<code> 空格</code> &#x2F; <code>CTRL</code> + <code>0 ~6</code> &#x2F; <code>CTRL</code> + <code>加号/减号</code>）</h2><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题</p></blockquote><span id="more"></span><blockquote><p>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p></blockquote><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><blockquote><p><strong>CTRL + 1~6</strong> ：选中文本变为对应级别的标题<br><strong>CTRL + 0</strong> ：选中标题变为普通文本<br><strong>CTRL + 加号&#x2F;减号</strong> ：选中标题进行级别加减</p></blockquote><h3 id="标题会在目录与大纲分级显示-可以跳转"><a href="#标题会在目录与大纲分级显示-可以跳转" class="headerlink" title="标题会在目录与大纲分级显示, 可以跳转"></a>标题会在目录与大纲分级显示, <strong>可以跳转</strong></h3><h3 id="严格模式开启：标题为-空格，而不是"><a href="#严格模式开启：标题为-空格，而不是" class="headerlink" title="严格模式开启：标题为# + 空格，而不是#"></a>严格模式开启：标题为<code>#</code> + <code>空格</code><strong>，而不是</strong><code>#</code></h3><h2 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h2><h3 id="1-换行-回车-SHIFT-回车"><a href="#1-换行-回车-SHIFT-回车" class="headerlink" title="1. 换行(回车 &#x2F; SHIFT + 回车)"></a>1. 换行(<code>回车</code> &#x2F; <code>SHIFT</code> + <code>回车</code>)</h3><blockquote><p>回车 ：大换行（分隔大）<br>SHIFT + 回车 ：小换行（分隔小)</p></blockquote><h3 id="2-分割线（-或-回车）"><a href="#2-分割线（-或-回车）" class="headerlink" title="2. 分割线（--- 或*** + 回车）"></a>2. 分割线（<code>---</code> 或<code>***</code> + <code>回车</code>）</h3><h2 id="三、字体"><a href="#三、字体" class="headerlink" title="三、字体"></a>三、字体</h2><h3 id="1-粗体（-或-包围-CTRL-B）"><a href="#1-粗体（-或-包围-CTRL-B）" class="headerlink" title="1. 粗体（**  ** 或  __   __ 包围 &#x2F; CTRL + B）"></a>1. 粗体（<code>**</code>  <code>**</code> 或  <code>__</code>   <code>__</code> 包围 &#x2F; <code>CTRL</code> + <code>B</code>）</h3><h3 id="2-下划线（-包围-CTRL-U）"><a href="#2-下划线（-包围-CTRL-U）" class="headerlink" title="2. 下划线（&lt;b&gt;  &lt;/b&gt; 包围 &#x2F; CTRL + U）"></a>2. 下划线（<code>&lt;b&gt;</code>  <code>&lt;/b&gt;</code> 包围 &#x2F; <code>CTRL</code> +<code> U</code>）</h3><h3 id="3-斜体（-或-包围-CTRL-I）"><a href="#3-斜体（-或-包围-CTRL-I）" class="headerlink" title="3. 斜体（*  * 或 _  _ 包围 &#x2F; CTRL + I）"></a>3. 斜体（<code>*</code>  <code>*</code> 或 <code>_</code>  <code>_</code> 包围 &#x2F; <code>CTRL</code> + <code>I</code>）</h3><h3 id="4-删除线（-包围-SHIFT-ALT-5"><a href="#4-删除线（-包围-SHIFT-ALT-5" class="headerlink" title="4. 删除线（~~  ~~ 包围 &#x2F; SHIFT + ALT + 5)"></a>4. 删除线（<code>~~</code>  <code>~~</code> 包围 &#x2F; <code>SHIFT</code> + <code>ALT</code> + <code>5</code>)</h3><h3 id="5-高亮（-包围）"><a href="#5-高亮（-包围）" class="headerlink" title="5. 高亮（==  == 包围）"></a>5. 高亮（<code>==</code>  <code>==</code> 包围）</h3><h3 id="6-斜体并强调-（用-或-包围）"><a href="#6-斜体并强调-（用-或-包围）" class="headerlink" title="6. 斜体并强调 （用 ***  *** 或 ___  ___ 包围）"></a>6. <em><strong>斜体并强调</strong></em> （用 <code>***</code>  <code>***</code> 或 <code>___</code>  <code>___</code> 包围）</h3><h2 id="四、上下标"><a href="#四、上下标" class="headerlink" title="四、上下标"></a>四、上下标</h2><h3 id="1-上标（-包围）"><a href="#1-上标（-包围）" class="headerlink" title="1. 上标（^  ^ 包围）"></a>1. 上标（<code>^</code>  <code>^ </code>包围）</h3><h3 id="2-下标（-包围）"><a href="#2-下标（-包围）" class="headerlink" title="2. 下标（~  ~ 包围）"></a>2. 下标（<code>~</code>  <code>~</code> 包围）</h3><h2 id="五、区块（-空格）"><a href="#五、区块（-空格）" class="headerlink" title="五、区块（&gt; + 空格）"></a>五、区块（<code>&gt;</code> + <code>空格</code>）</h2><blockquote><p>最外层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote><h2 id="六、列表"><a href="#六、列表" class="headerlink" title="六、列表"></a>六、列表</h2><h3 id="1-无序列表（-空格-【回车-Tab-会进入下级】）"><a href="#1-无序列表（-空格-【回车-Tab-会进入下级】）" class="headerlink" title="1. 无序列表（- &#x2F; + &#x2F; * + 空格  【回车 + Tab 会进入下级】）"></a>1. 无序列表（<code>-</code> &#x2F; <code>+</code> &#x2F; <code>*</code> +<code> 空格</code>  【<code>回车</code> + <code>Tab</code> 会进入下级】）</h3><blockquote><ul><li>1<ul><li>2<ul><li>3<ul><li>~~</li></ul></li></ul></li></ul></li></ul></blockquote><h3 id="2-有序列表（数字-空格-【回车-Tab-会进入下级】）"><a href="#2-有序列表（数字-空格-【回车-Tab-会进入下级】）" class="headerlink" title="2. 有序列表（数字 + . + 空格 【回车 + Tab 会进入下级】）"></a>2. 有序列表（<code>数字</code> + <code>.</code> + <code>空格</code> 【<code>回车</code> + <code>Tab</code> 会进入下级】）</h3><blockquote><ol><li>1<ol><li>2<ol><li>3<ol><li>~~</li></ol></li></ol></li></ol></li></ol></blockquote><h3 id="3-任务列表（-空格-x-空格）"><a href="#3-任务列表（-空格-x-空格）" class="headerlink" title="3. 任务列表（ - [ ] + 空格 &#x2F; - [x] + 空格）"></a>3. 任务列表（ <code>- [ ]</code> + <code>空格</code> &#x2F; <code>- [x]</code> + <code>空格</code>）</h3><h2 id="七、代码显示"><a href="#七、代码显示" class="headerlink" title="七、代码显示"></a>七、代码显示</h2><h3 id="1-单行代码（-包围-CTRL-SHIFT-）"><a href="#1-单行代码（-包围-CTRL-SHIFT-）" class="headerlink" title="1. 单行代码（`  ` 包围 &#x2F; CTRL + SHIFT + `）"></a>1. 单行代码（`  ` 包围 &#x2F; <code>CTRL</code> + <code>SHIFT</code> + `）</h3><h3 id="2-代码块（-回车-CTRL-SHIFT-K）"><a href="#2-代码块（-回车-CTRL-SHIFT-K）" class="headerlink" title="2. 代码块（``` + 回车 &#x2F; CTRL + SHIFT + K）"></a>2. 代码块（``` + 回车 &#x2F; <code>CTRL</code> + <code>SHIFT</code> + <code>K</code>）</h3><h2 id="八、链接（直接写链接-CTRL-K-【可用于文内跳转-】"><a href="#八、链接（直接写链接-CTRL-K-【可用于文内跳转-】" class="headerlink" title="八、链接（直接写链接 &#x2F; [] + ()  &#x2F; CTRL + K 【可用于文内跳转 [~~](#~~)】)"></a>八、链接（直接写链接 &#x2F; <code>[]</code> + <code>()</code>  &#x2F; <code>CTRL</code> + <code>K</code> 【可用于文内跳转 <code>[~~](#~~)</code>】)</h2><h2 id="九、注释（文中写-数字-文后加上-对应数字-）"><a href="#九、注释（文中写-数字-文后加上-对应数字-）" class="headerlink" title="九、注释（文中写[^ + 数字]   文后加上[^ + 对应数字]:）"></a>九、注释（文中写<code>[^ + 数字]</code>   文后加上[<code>^ + 对应数字]:</code>）</h2><h2 id="十、表格（CTRL-T-用-绘制）"><a href="#十、表格（CTRL-T-用-绘制）" class="headerlink" title="十、表格（CTRL + T &#x2F; 用 | 绘制）"></a>十、表格（<code>CTRL</code> + <code>T</code> &#x2F; 用 <code>|</code> 绘制）</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 1 | 2 | 3 |</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">| 1 | 2 | 3 |</span><br><span class="line">| 4 | 5 | 6 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">1</th><th align="center">2</th><th align="right">3</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">2</td><td align="right">3</td></tr><tr><td align="left">4</td><td align="center">5</td><td align="right">6</td></tr></tbody></table><h2 id="十一、图片（-直接拖拽-复制粘贴）"><a href="#十一、图片（-直接拖拽-复制粘贴）" class="headerlink" title="十一、图片（![]() &#x2F; 直接拖拽 &#x2F; 复制粘贴）"></a>十一、图片（<code>![]()</code> &#x2F; 直接拖拽 &#x2F; 复制粘贴）</h2><h2 id="十二、表情（打开编辑，找到表情与符号）"><a href="#十二、表情（打开编辑，找到表情与符号）" class="headerlink" title="十二、表情（打开编辑，找到表情与符号）"></a>十二、表情（打开编辑，找到表情与符号）</h2><h2 id="十三、目录（-TOC-）"><a href="#十三、目录（-TOC-）" class="headerlink" title="十三、目录（[TOC]）"></a>十三、目录（<code>[TOC]</code>）</h2><h2 id="十四、其余快捷键"><a href="#十四、其余快捷键" class="headerlink" title="十四、其余快捷键"></a>十四、其余快捷键</h2><table><thead><tr><th align="center">按键</th><th align="center">效果</th><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><code>Ctrl</code> + <code>D</code></td><td align="center">选中当前词</td><td align="center"><code>Ctrl</code> + <code>L</code></td><td align="center">选中当前句&#x2F;行</td></tr><tr><td align="center"><code>Ctrl</code> + <code>E</code></td><td align="center">选中当前区块</td><td align="center"><code>Ctrl</code> + <code>F</code></td><td align="center">搜索当前选中</td></tr><tr><td align="center"><code>Ctrl</code> + <code>H</code></td><td align="center">替换当前选中</td><td align="center"><code>Ctrl</code> + <code>J</code></td><td align="center">滚动屏幕将选中滚至顶部</td></tr><tr><td align="center"><code>Ctrl</code> + <code>W</code></td><td align="center">关闭当前窗口</td><td align="center"><code>Ctrl</code> + <code>N</code></td><td align="center">打开新窗口</td></tr><tr><td align="center"><code>Ctrl</code> + <code>O</code></td><td align="center">打开文件</td><td align="center"><code>Ctrl</code> + <code>P</code></td><td align="center">搜索文件并打开</td></tr><tr><td align="center"><code>Ctrl</code> + <code>回车</code></td><td align="center">表格下方插入行</td><td align="center"><code>Ctrl</code> + <code>,</code></td><td align="center">打开偏好设置</td></tr><tr><td align="center"><code>Ctrl</code> + <code>.</code></td><td align="center">切换全角&#x2F;半角标点</td><td align="center"><code>Ctrl</code> + <code>/</code></td><td align="center">切换正常&#x2F;源代码视图</td></tr><tr><td align="center"><code>Ctrl</code> + <code>Shift</code> + <code>-</code></td><td align="center">缩小视图缩放</td><td align="center"><code>Ctrl</code> + <code>Shift</code> + <code>+</code></td><td align="center">放大视图缩放</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建小结</title>
      <link href="/2024/08/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%BB%93/"/>
      <url>/2024/08/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="以下总结了在博客搭建过程中遇到的一些较为重要的问题"><a href="#以下总结了在博客搭建过程中遇到的一些较为重要的问题" class="headerlink" title="以下总结了在博客搭建过程中遇到的一些较为重要的问题"></a>以下总结了在博客搭建过程中遇到的一些较为重要的问题</h2><h1 id="仓库搭建"><a href="#仓库搭建" class="headerlink" title="仓库搭建"></a>仓库搭建</h1><blockquote><p>创建仓库时，仓库名称要和用户名一致</p></blockquote><blockquote><p>注意，github默认的主分支是main不是master，master是以前的，在看教程时需小心</p></blockquote><span id="more"></span><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><blockquote><p>个人觉得域名用创建时的就好（看个人需求）</p></blockquote><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><blockquote><p>使用SSH连接远程仓库时，最好一个平台一对公私钥，因为不同平台连接时会有可能成功或失败，需要在配置文件中进行相应的调整，例：github要将端口改为443，默认端口22不行，但gitee却可以</p></blockquote><p>配置文件内容格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br><span class="line">User git</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_key</span><br></pre></td></tr></table></figure><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p>在下载Node.js是注意权限问题和关闭杀毒软件</p></blockquote><blockquote><p>在使用npm下载时，推荐使用国内镜像网站（速度快，可能还可以避免某些问题），本人使用的是淘宝镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><blockquote><p>使用魔法加速仍不如使用镜像快，而且在设置sitemap时博客还出现一对报错，但换成镜像后就没有问题了</p></blockquote><h1 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h1><blockquote><p>在对博客进行个性化配置是最好每个功能都单独搜一下教程（最新），因为主题版本更新后可能会和以前的教程有些不同</p><p>例：hexo主题设置显示文章字数和阅读时长安装的插件不再是hexo-wordcount而是改为hexo-symbols-count-time</p></blockquote><blockquote><p>在搭建博客时遇到的问题基本都可以在网上找到解决方法，所以遇到问题时不要急，多翻翻几个网页或许就能找到答案</p></blockquote><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><blockquote><p>最后，提个建议，在开发时最好将项目备份！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/08/03/hello-world/"/>
      <url>/2024/08/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
